// Spawns an Ally into the level
// Checks for Souls, and the amount of allies you have
class HA_AllySpawner : CustomInventory
{
	static const string HexenListName[] =
	{ // Uses actual PlayerClass names
		"FighterPlayer",
		"ClericPlayer",
		"MagePlayer"
	};

	static const class<actor> HexenSpawnList[] =
	{
		"HA_Fighter",
		"HA_Cleric",
		"HA_Mage"
	};

	static const string HexenColors[] =
	{
		"Green",
		"Red",
		"Blue",
		"Silver",
		"Yellow"
	};

	enum eHexenColors
	{
		HA_GREEN,
		HA_RED,
		HA_BLUE,
		HA_SILVER,
		HA_YELLOW,
	}

	static const string HexenAllyList[] =
	{
		"Fighter",
		"Cleric",
		"Mage"
	};

	clearscope int AllySpawnCost()
	{
		return 5;
	}

	// Todo: further cleanup
	void SpawnAlly()
	{		
		if (owner)
		{
			actor MyPlayer = owner;
			
			if (!MyPlayer) return;

			//Console.Printf("Souls: %d | Spawner: %d", MyPlayer.CountInv("HA_Soul"), MyPlayer.CountInv("HA_AllySpawner"));

			// Check if we have enough slots to spawn a new Ally
			// Also if we already have Allies spawned
			let HubInv = HA_AIHub(MyPlayer.FindInventory("HA_AIHub"));
			if (HubInv)
			{
				if (HubInv.TotalNum >= MyPlayer.CountInv("HA_AllySlot"))
				{
					string Req = String.Format("\c[red]You can only have %d Allies spawned!\n\c[white]Upgrade your Slot!", MyPlayer.CountInv("HA_AllySlot"));
					let AllySlot = MyPlayer.FindInventory("HA_AllySlot");
					if (AllySlot)
					{
						if (MyPlayer.CountInv("HA_AllySlot") == AllySlot.MaxAmount)
						{
							Req = String.Format("\c[red]You can no longer spawn any Ally\nas you have hit the maximum amount possible!");
						}
					}

					if (MyPlayer.checkLocalView())
					{
						Console.MidPrint(NULL, Req);
					}
					return;
				}
			}

			int CostToSpawn = AllySpawnCost();
			if (MyPlayer.CountInv("HA_Soul") < CostToSpawn)
			{
				int Req = CostToSpawn - MyPlayer.CountInv("HA_Soul");
				string Requ = String.Format("\c[red]Not enough souls to spawn Ally!\n\c[silver]You need %d more", Req);
				if (MyPlayer.checkLocalView())
				{
					Console.MidPrint(NULL, Requ);
				}
				MyPlayer.A_StartSound("DoorLocked", CHAN_BODY);
				return;
			}

			MyPlayer.A_TakeInventory("HA_Soul", CostToSpawn);
			int Souls = MyPlayer.CountInv("HA_Soul");
			MyPlayer.A_SetInventory("HA_AllySpawner", Souls);

			//if (MyPlayer.CountInv("HA_Soul") == 0)
				//MyPlayer.A_GiveInventory("HA_Soul", 1);

			string PlayerClass = MyPlayer.GetClassName();

			//------------ WoC support

			// Check for an item that is 100% always in the mod, and not in any other mod
			bool isWoCLoaded = false;
			string WoCItem = "WoC_Stat";
			class<Actor> woc = WoCItem;
			if (woc)
			{
				Console.Printf("\c[red]Hexen Allies: \c[yellow]Wrath of Cronos \c[red]detected!");
				isWoCLoaded = true;
				
				// Make the Hub inventory item aware of WoC
				if (HubInv)
				{
					HubInv.WoCMod = true;
				}
			}

			//------------------------------ WoC support
			if (isWoCLoaded)
			{
				if (PlayerClass ~== "NewFighterPlayer")
					PlayerClass = "FighterPlayer";
				if (PlayerClass ~== "NewClericPlayer")
					PlayerClass = "ClericPlayer";
				if (PlayerClass ~== "NewMagePlayer")
					PlayerClass = "MagePlayer";
				// todo: #1 WoC: Add Ally version of Hunter, Necromancer, and Assassin
				if (PlayerClass ~== "NewHunterPlayer" ||
					PlayerClass ~== "NewNecromancerPlayer" ||
					PlayerClass ~== "NewAssassinPlayer")
					{
						Console.Printf("\c[red]Hexen Allies: \c[yellow]The Playerclass you play as doesn't have an Ally version!");
						int randomclass = random[woc](0, HexenListName.Size()-1);
						PlayerClass = HexenListName[randomclass];
					}
			}
			//------------------------------

			int TotalAlliesSpawned = 0;
			int Chosen = 0;

			if (HubInv)
			{
				TotalAlliesSpawned = HubInv.TotalNum;
			}

			if (TotalAlliesSpawned <= 2)
			{
				int ActiveClass = 0;
				Array<int> AvailableClass;
				for (int i = 0; i < HexenListName.Size(); i++)
				{
					if (PlayerClass ~== HexenListName[i])
					{
						ActiveClass = i;
					}

					if (!(PlayerClass ~== HexenListName[i]))
					{
						AvailableClass.Push(i);
					}
				}

				// Randomize the Ally's class on spawn
				int chsn = random[choose](0, AvailableClass.Size()-1);
				Chosen = AvailableClass[chsn];

				// The idea here is that until the Player has 2 allies do not spawn an Ally class identical to the Player's
				if (HubInv && TotalAlliesSpawned > 0)
				{
					Chosen = HubInv.NonDuplicateClass(ActiveClass);
				}

				// We can just assume the Third Ally's class will always be the same like the Player's
				if (TotalAlliesSpawned == 2)
				{
					Chosen = ActiveClass;
				}
				
				// Todo: Force spawn a class if desired
				//Chosen = 2;
			}
			else
			{
				// todo: Should we leave this as totally random, or introduce a ruling?
				Chosen = random[tas](0, HexenSpawnList.Size()-1);
				
				// Todo: Force spawn a class if desired
				//Chosen = 2;
			}

			int UnlockableWeapons = 1;
			if (HubInv)
			{
				UnlockableWeapons = HubInv.UnlockWeaponry;
			}

			HA_CoreAI SpawnedAI = HA_CoreAI(spawn(HexenSpawnList[Chosen], MyPlayer.pos, ALLOW_REPLACE));
			if (SpawnedAI)
			{
				SpawnedAI.MyPlayer = MyPlayer;
				SpawnedAI.TeleportToPlayer(false);

				SpawnedAI.HexenType = HexenAllyList[Chosen];
				SpawnedAI.WeaponCapability = UnlockableWeapons;
				SpawnedAI.SetStateLabel("See");
				// Say hooray for Color randomization!
				int rndColor = random[clr](0, HexenColors.Size()-1);
				string AIcolor = "n/a";
				if (SpawnedAI.HexenType ~== "Cleric" || 
					SpawnedAI.HexenType ~== "Mage")
				{
					AIcolor = String.Format("CM%s", HexenColors[rndColor]);
					// Cleric and Mage is blue by default, so we don't need to set it
					if (rndColor != HA_BLUE)
						SpawnedAI.A_SetTranslation(AIcolor);
					else AIcolor = "default";
				}
				else if (SpawnedAI.HexenType ~== "Fighter")
				{
					AIcolor = String.Format("F%s", HexenColors[rndColor]);
					// Fighter is Silver by default
					if (rndColor != HA_SILVER)
						SpawnedAI.A_SetTranslation(AIcolor);
					else AIcolor = "default";
				}

				// Needed for chat coloring
				SpawnedAI.ChatColor = HexenColors[rndColor];

				// Execute function from Player's inventory
				if (HubInv)
				{
					// Store Ally information
					HubInv.AddAlly(SpawnedAI, SpawnedAI.HexenType, AIcolor, SpawnedAI.ChatColor, 100, SpawnedAI.ActiveWeapon);
				}

				SpawnedAI.AllySay("Ready for action!");
				SpawnedAI.Following = true;

				SpawnedAI.SetTag(SpawnedAI.AllyName());

				// Settings for AI after WoC is detected
				if (isWoCLoaded)
				{
					// No experience for now, will have to save that too into an array
					SpawnedAI.ACS_NamedExecuteAlways("WOC Monster Init", 0, 256, 0);
					SpawnedAI.WoC = true;
					
					string WoCItem1 = "CurrentMaxHealth";
					string WoCItem2 = "Level";
					class<Inventory> CurrentMaxHealth = WoCItem1;
					class<Inventory> Level = WoCItem2;
					
					// Force set this for now
					SpawnedAI.A_SetInventory(CurrentMaxHealth, 100);
					SpawnedAI.A_SetInventory(Level, 1);
				}
			}
		}
	}

	Default
	{
		+COUNTITEM
		+FLOATBOB
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		Inventory.PickupFlash "PickupFlash";
		+INVENTORY.FANCYPICKUPSOUND
		Inventory.Icon "HASPAWN";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "Picked up an Ally Spawner. Wait... that's illegal";
		Inventory.Amount 1;
		Inventory.MaxAmount 999;
		Tag "Ally Spawner";
	}
	States
	{
	Spawn:
		EGGC ABCB 6;
		Loop;
	Use:
		TNT1 A 0 { invoker.SpawnAlly(); }
		Fail;
	}
}