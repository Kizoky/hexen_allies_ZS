// HA_CoreAI is the core actor of all Allies
class HA_CoreAI : Actor
{
	// Ignore targets for a couple of seconds
	Array<actor> IgnoreTarget;
	
	// cross-mod specific variables
	bool WoC;

	// Hexen Allies variables
	actor MyPlayer, attacker, GuardSpot, CommandOrb;
	actor MultiIndicator;

	// Class the AI is (Fighter, Cleric, Mage)
	string HexenType;

	// To avoid any confusion, this does indeed match the AI's color
	// This string is combined with a translation name (check TRNSLATE.txt: CM for Cleric and Mage; F for Fighter)
	string ChatColor;

	int SpawnSlot;
	
	bool IsMelee, IsRanged, CanShootProj;
	bool CDtoTele;

	string ActiveWeapon;

	bool isInAir;
	double LastAirZ;

	bool Following;

	int WeaponCapability;
	
	// Pronouns for allies
	// "He" "She" "Them"
	string Pronoun;
	
	string LastDamageType;

	int OverallKills;
	
	// Override it in an actor inheriting from HA_CoreAI
	virtual void HA_PostBeginPlay() {}

	// Override it in an actor inheriting from HA_CoreAI
	virtual void SetActiveWeapon() {}

	// Set from HA_AIHub
	// Sets highest possible weapon(s) for Ally
	void SetCapability (int Weapon2Unlock)
	{
		WeaponCapability = Weapon2Unlock;

		SetActiveWeapon();
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (!MyPlayer)
		{
			Console.Printf("\c[red]Hexen Allies:\c[yellow] Summoning via console isn't supported!");
			Destroy();
			return;
		}

		spawn("Teleportfog",pos);
		Following = true;

		if (Multiplayer)
		{
			let identifier = HA_AllyIdentifier(spawn("HA_AllyIdentifier", pos));
			if (identifier)
			{
				identifier.Ally = self;
				MultiIndicator = identifier;
				MultiIndicator.A_SetTics(-1);
			}

			// Grab active color setting from cvar (inside HA_AIHub)
			let HubInv = HA_AIHub(MyPlayer.FindInventory("HA_AIHub"));
			if (HubInv)
			{
				// Make the Logo glow on Allies you own in Multiplayer
				if (MyPlayer && MyPlayer.checkLocalView() && MultiIndicator)
				{
					MultiIndicator.frame = 1;
					MultiIndicator.A_SetTranslation(String.Format("HXALogo%s", HubInv.MultiplayerActiveColor));
				}
			}
		}

		HA_PostBeginPlay();
	}
	
	bool CheckPath(Actor targ) 
	{
		if (!targ)
			return false;

		int stepCount = Distance2d(targ)/radius + 1;
		for (int i = 0; i < stepCount; ++i) 
		{
			if (CheckBlock(CBF_NOACTORS | CBF_ABSOLUTEANGLE, AAPTR_DEFAULT, i*radius, 0, 0, AngleTo(targ)))
				return false;
		}

		return true;
	}

	protected void A_MovementChase(actor targ)
	{
		if (targ)
		{
			/* Jumping
			// Currently buggy so it's disabled
			FLineTraceData lineData;
			LineTrace(angle,50,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitWall)
			{
				if (pos.z ~== floorz)
				{
					Angle = AngleTo(targ);
					A_ChangeVelocity (0, 0, 7, 0);
					A_Recoil(-1.00);
				}
			}
			*/

			int oldDir = moveDir;
			moveDir = (8 * AngleTo(targ, true) / 360) % 8;
			if (!TryWalk())
			{
				moveDir = oldDir;
				if(!TryWalk())
				{
					for (int i = 1; i <= 4; ++i)
					{
						moveDir = (oldDir + i) % 8;
						if (TryWalk())
							break;

						moveDir = (oldDir - i) % 8;
						if (TryWalk())
							break;
					}
				}
			}

			// Face movement direction
			angle = 360 * moveDir / 8;
			if (angle > 180)
				angle -= 360;

		}
	}
	
	void FollowActor(actor MyPlayer)
	{
		if (Distance3D(MyPlayer) > 100)
		{
			vector2 PlayerPos = (MyPlayer.pos.x,MyPlayer.pos.y);			
			if (IsVisible (MyPlayer, true) && CheckMove(PlayerPos, flags: PCM_NOLINES | PCM_NOACTORS))
			{
				// We can see the Player so just angle towards them
				A_MovementChase(MyPlayer);
				Angle = AngleTo(MyPlayer);
				A_Recoil(-1.75);
			}
			else
			{
				// Note: There's a small.. or rather huge chance the AI will get stuck for some reason while
				// trying to catch up to the Player, we'll countdown to 15 and teleport it back to the Player
				if (TimeProbablyGotStuck == 0)
				{
					TimeProbablyGotStuck = level.time + 35 * 15;
				}
				else if (level.time > TimeProbablyGotStuck)
				{
					if (IsVisible (MyPlayer, true))
					{
						TimeProbablyGotStuck = level.time + 35 * 15;
						return;
					}
					
					spawn("teleportfog", pos);
					SetOrigin(MyPlayer.pos+(0,0,50), TRUE);
					spawn("teleportfog", pos);
					TimeProbablyGotStuck = 0;
					CDtoTele = false;
				}
				
				// Move towards Player
				A_Recoil(-3);
				A_MovementChase(MyPlayer);
			}
		}
		else
		{
			CDtoTele = false;
			TimeProbablyGotStuck = 0;
			frame = 0;
			// random angle during staying in one place
			if (level.time > TimeBeforeRandomTurn)
			{
				angle = random[ang](-360,360);
				TimeBeforeRandomTurn = level.time + 35 * random[tiem](1,4);
			}
		}
	}

	int TimeBeforeRandomTurn, TimeProbablyGotStuck, TimeResetIgnoreTargets;
	virtual void A_FollowerChase()
	{
		if ((target && target.bKILLED) || (target && target is "PlayerPawn"))
		{
			target = null;
			TimeProbablyGotStuck = 0;
		}
		
		// Follow our player, or guard Area
		if (!target && MyPlayer)
		{
			if (Following)
				FollowActor(MyPlayer);
			else if (!Following && GuardSpot)
				FollowActor(GuardSpot);
		}
		
		// Look for enemies
		if (!target)
		{
			LookForEnemies(false);

			for (uint i = 0; i < IgnoreTarget.size(); i++)
			{
				if (IgnoreTarget[i] == target)
				{
					target = null;
					break;
				}
			}
			
			if (!IsRanged)
			{
				if (!CheckPath(target) || !(IsVisible (target, true)))
				{
					target = null;
					return;
				}
			}
			else
			{
				if (!CheckPath(target) && !(IsVisible (target, true)))
				{
					target = null;
					return;
				}
			}
			
			// Acquired a new target
			if (target)
			{
				// Target not reachable
				if (!IsRanged)
				{
					if (!CheckPath(target) || !(IsVisible (target, true)))
					{
						target = null;
						return;
					}
				}
				else
				{
					if (!CheckPath(target) && !(IsVisible (target, true)))
					{
						target = null;
						return;
					}
				}

				// Target is too far away
				if (Distance3D(target) > 750)
					target = null; return;
			}
			
		}
		
		// Active target we have
		if (target && !target.bKILLED)
		{
			if (MyPlayer)
			{
				if (Distance3D(MyPlayer) > 645 && !(CheckSight (MyPlayer, SF_IGNOREVISIBILITY | SF_SEEPASTSHOOTABLELINES | SF_SEEPASTBLOCKEVERYTHING | SF_IGNOREWATERBOUNDARY)) )
				{
					if (!CDtoTele)
					{
						TimeProbablyGotStuck = level.time + 35 * 6;
						Console.Printf("Initiating teleporting...\n");
						CDtoTele = true;
					}
						
					if (CDtoTele && level.time > TimeProbablyGotStuck)
					{
						CDtoTele = false;
						target = null;
						spawn("teleportfog", pos);
						SetOrigin(MyPlayer.pos+(0,0,50), TRUE);
						spawn("teleportfog", pos);
						TimeProbablyGotStuck = 0;
						return;
					}
				}
				else
					CDtoTele = false;
			}
			
			A_MovementChase(target);
			
			A_AllyDodge();
			
			// Closing in or closing out
			
			if (IsRanged)
			{
				if (target)
				{
					if (Distance3D(target) > 150)
						A_Recoil(-1.75);
					else
						A_Recoil(1.75);
				}
			}
			else if (IsMelee)
			{
				if (target)
				{
					bool alreadyignored = false;
					for (uint i = 0; i < IgnoreTarget.size(); i++)
					{
						if (IgnoreTarget[i] == target)
						{
							alreadyignored = true;
							break;
						}
					}
					
					// Ignore flying targets we can't reach
					if ((target.pos.z-pos.z) > 70 && !alreadyignored)
					{
						vector2 NMEPos = (target.pos.x,target.pos.y);
						if (target.bFLOAT || target.bNOGRAVITY)
						{
							IgnoreTarget.Push(target);
							TimeResetIgnoreTargets = level.time + 35 * 5;
							target = null;
							return;
						}
						else if (!CheckMove(NMEPos, flags: PCM_NOLINES | PCM_NOACTORS))
						{
							Console.Printf("HA: Can't reach non-flying enemy");
							IgnoreTarget.Push(target);
							TimeResetIgnoreTargets = level.time + 35 * 5;
							target = null;
							return;
						}
					}
				
					if (Distance3D(target) > 25)
						A_Recoil(-1.75);
				}
			}
			
			A_AllyShoot();
		
		}
	}
	
	int TimeUntilDodge;
	protected void A_AllyDodge()
	{
		if (!target || TimeUntilDodge > level.time) return;
		
		//if (!(level.time % 1 == 0)) return;

		// Special handling for WoC, possibly fixes issues with other mods too
		// todo WoC: Check the base monster actor and check for specific states
		bool dodge = false;
		if (WoC || !WoC)
		{
			if (!target.InStateSequence(target.CurState, target.ResolveState("Spawn")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("Pain")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("Death")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("XDeath")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("See")))
			{
				dodge = true;
				Console.Printf("Dodging");
			}
		}
		
		FLineTraceData lineData;
		double ThrustValue = 15;
		
		/*
		if (!WoC)
		{
			if (target.InStateSequence(target.CurState, target.ResolveState("Missile")) || 
				target.InStateSequence(target.CurState, target.ResolveState("Melee")))
			{
				dodge = true;
			}
		}
		*/
		
		// Let's check if we can move right or left, is there a better way to do this?
		if (dodge)
		{
			bool HitWall1 = false;
			bool HitWall2 = false;
			
			LineTrace(angle+90,150,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
			{
				//Console.Printf("hit into a wall plus");
				angle = AngleTo(target);
				Thrust(ThrustValue, Angle - 90);
				HitWall1 = true;
				TimeUntilDodge = level.time + 35;
			}
			
			LineTrace(angle-90,150,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
			{
				//Console.Printf("hit into a wall minus");
				angle = AngleTo(target);
				Thrust(ThrustValue, Angle + 90);
				HitWall2 = true;
				TimeUntilDodge = level.time + 35;
			}
			
			// Not fool proof, they will still sometimes run into a projectile unfortunately
			/*
			if (!HitWall1 && !HitWall2)
			{
				Thrust(ThrustValue, Angle + 90);
			}
			*/
			
			// Oh no, they are trying to melee attack!
			if (InStateSequence(target.CurState, target.ResolveState("Melee")) && !HitWall1 && !HitWall2)
			{
				if (target.target && target.target == self)
				{
					// Can we even dodge behind?
					LineTrace(-angle,150,0, offsetz: 5, data: LineData);
					if (LineData.HitType == TRACE_HitWall || LineData.HitType == TRACE_HitActor)
					{
						bool rr = random[ly](0,1);
						if (rr)
							Thrust(ThrustValue, Angle - 90);
						else
							Thrust(ThrustValue, Angle + 90);
						
						return;
					}
					TimeUntilDodge = level.time + 35;
					A_Recoil(1.25);
				}
			}
		}
	}
	
	// Override it in an actor inheriting from HA_CoreAI
	virtual void HA_RangeShoot()
	{
		/*
		if (!IsMelee && CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0))
		{
			// Implement it in an actor inheriting from HA_CoreAI
		}
		*/
	}

	// Override it in an actor inheriting from HA_CoreAI
	virtual void HA_MeleeShoot()
	{
		/*
		if (IsMelee && CheckMeleeRange())
		{
			// Implement it in an actor inheriting from HA_CoreAI
		}
		*/
	}

	protected void A_AllyShoot()
	{
		if (!target) return;
		
		HA_RangeShoot();
		HA_MeleeShoot();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (source)
		{
			if (source is "PlayerPawn" || source is "HA_CoreAI")
			{
				return Super.DamageMobj(inflictor,source,0,mod,flags,angle);
			}

			if (!source.bIsMonster)
			{
				LastDamageType = mod;
				attacker = null;
				return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
			}

			attacker = source;
			target = attacker;
			angle = AngleTo(target);
		}
		else
			attacker = null;
		
		LastDamageType = mod;
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}

	// Colorized Ally name
	// Not to be confused with AllyName()
	string AllyNameColorized()
	{
		if (ChatColor ~== "Green") 
			return String.Format("\c[green]%s", HexenType);
		if (ChatColor ~== "Red")
			return String.Format("\c[red]%s", HexenType);
		if (ChatColor ~== "Blue")
			return String.Format("\c[blue]%s", HexenType);
		if (ChatColor ~== "Silver")
			return String.Format("\c[white]%s", HexenType);
		if (ChatColor ~== "Yellow")
			return String.Format("\c[yellow]%s", HexenType);

		return String.Format("\c[white]%s", HexenType);
	}

	// Owner's name AND Colorized Ally's name included
	string AllyNameColorizedPlus()
	{
		return String.Format("%s's %s", MyPlayer.player.GetUserName(), AllyNameColorized());
	}

	// For the chat
	void AllySay(string msg)
	{
		Console.Printf("%s\c*: %s", AllyNameColorizedPlus(), msg);
		A_StartSound("misc/chat", CHAN_7, attenuation:ATTN_NONE);
	}
	
	// Prints out Obituary (as if they were a Player) to the chat
	void AllyObituary()
	{
		string AIname = AllyNameColorizedPlus();

		if (attacker)
		{
			string ob = attacker.GetObituary(self, attacker, "none", false);
			ob = StringTable.Localize (ob);
			ob.Replace("%o ", "");
			
			// Detect pronouns in the obituary
			string localPronoun;
			if (Pronoun ~== "He")
				localPronoun = "his";
			if (Pronoun ~== "She")
				localPronoun = "her";
			if (Pronoun ~== "Them")
				localPronoun = "their";
			
			ob.Replace("%p", localPronoun);

			Console.Printf("%s \c[yellow]%s", AIname, ob);
		}
		// Died to World (no target)
		else
		{
			if (LastDamageType ~== "Fire")
				Console.Printf("%s \c[yellow]has melted.", AIname);
			else if (LastDamageType ~== "Ice")
				Console.Printf("%s \c[yellow]was frozen solid.", AIname);
			else if (LastDamageType ~== "Electric")
				Console.Printf("%s \c[yellow]was zapped.", AIname);
			else if (LastDamageType ~== "Drowning")
				Console.Printf("%s \c[yellow]couldn't swim.", AIname);
			else if (LastDamageType ~== "Slime")
				Console.Printf("%s \c[yellow]mutated.", AIname);
			else if (LastDamageType ~== "Crush")
				Console.Printf("%s \c[yellow]was squished.", AIname);
			else if (LastDamageType ~== "Telefrag")
				Console.Printf("%s \c[yellow]was telefragged.", AIname);
			else if (LastDamageType ~== "Falling")
				Console.Printf("%s \c[yellow]fell too far.", AIname);
			else if (LastDamageType ~== "Poison")
				Console.Printf("%s \c[yellow]was poisoned.", AIname);
			else if (LastDamageType ~== "Massacre")
				Console.Printf("%s \c[yellow]fell victim to the kill monsters cheat.", AIname);
			else
				Console.Printf("%s \c[yellow]has died.", AIname);
		}
	}

	// For Tags or other things that are displaying the Actor name
	string AllyName()
	{
		return String.Format("%s's %s", MyPlayer.player.GetUserName(), HexenType);
	}
	
	// Override it in an actor inheriting from HA_CoreAI
	virtual void HA_Tick() {}
	
	int SectorDMGInterval, SectorDMGAmount, SectorDMGTime;
	override void Tick()
	{
		Super.Tick();
		
		HA_Tick();
		
		if (bKILLED)
			return;
		
		A_AllyDodge();
		
		TextureID Fire = texman.CheckForTexture("X_001");
		// Special sector damage flags
		// Sometimes a sector doesn't have a flag set, but could still do damage
		bool DamagingSector = ((cursector.Flags & cursector.SECF_DAMAGEFLAGS) || cursector.damageamount > 0);
		if (DamagingSector)
		{
			if (SectorDMGInterval != cursector.damageinterval ||
				SectorDMGAmount != cursector.damageamount)
			{
				SectorDMGInterval = cursector.damageinterval;
				SectorDMGAmount = cursector.damageamount;
			}
			
			if (level.time > SectorDMGTime)
			{
				//Console.Printf("Sector Damage: %d | Interval: %d", cursector.damageamount, cursector.damageinterval);	
				Console.Printf("Damage Type: %s", cursector.damagetype);
				int dd = DamageMobj(self, NULL, SectorDMGAmount, cursector.damagetype);
				SectorDMGTime = level.time + SectorDMGInterval;
				
				// Play Lava sizzling sound
				if ((cursector.GetTexture(cursector.floor)) == Fire)
					A_StartSound("LavaSizzle", CHAN_BODY);
			}
		}
		// Check if current floor texture is Fire (even without flags it damages the Player, so it should the allies too)
		else if ((cursector.GetTexture(cursector.floor)) == Fire)
		{
			if (SectorDMGInterval != 32 || SectorDMGAmount != 5)
			{
				SectorDMGInterval = 32;
				SectorDMGAmount = 5;
			}
			
			if (level.time > SectorDMGTime)
			{
				//Console.Printf("Sector Damage: %d | Interval: %d", cursector.damageamount, cursector.damageinterval);
				int dd = DamageMobj(self, NULL, SectorDMGAmount, "Fire");
				A_StartSound("LavaSizzle", CHAN_BODY);
				SectorDMGTime = level.time + SectorDMGInterval;
			}
			
			//Console.Printf("Texture floor: %d", cursector.GetTexture(cursector.floor));
		}
		
		// Monsters are more likely to get stuck if they spawn in-air
		if (!(pos.z <= floorz))
			bTHRUSPECIES = true;
		else
			bTHRUSPECIES = false;
		
		// Play a Landing or Grunt sound
		// Note: in Doom games it's based on the velocity Z (falling speed)
		// not the difference between last position Z and floor Z
		// But because I believe it's unreliable with non-Players this should do the job plenty
		if (pos.z > floorz)
		{
			IsInAir = true;
			if (LastAirZ == 0)
			{
				LastAirZ = pos.z;
			}
		}
		else if (pos.z <= floorz)
		{
			if (IsInAir)
			{
				if (IsActorPlayingSound(CHAN_VOICE)) return;

				double Diff = floorz-LastAirZ;

				if (-Diff > 40 && -Diff < 69)
				{
					A_StartSound("PlayerLand", CHAN_VOICE);
				}

				if (-Diff > 69)
				{
					string Sound = String.Format("Player%sGrunt", HexenType);
					A_StartSound(Sound, CHAN_VOICE);
				}

				IsInAir = false;
				LastAirZ = 0;
			}
		}
		
		if (level.time > TimeResetIgnoreTargets)
		{
			for (uint i = 0; i < IgnoreTarget.size(); i++)
			{
				IgnoreTarget.Delete(i);
			}
			TimeResetIgnoreTargets = level.time + 35 * 5;
		}
	}

	int NoTouching;
	override void Activate(Actor activator)
	{
		if (activator && MyPlayer)
		{
			if (activator == MyPlayer)
			{
				bool LocalOptionDecide = false;

				let HubInv = HA_AIHub(MyPlayer.FindInventory("HA_AIHub"));
				if (HubInv)
				{
					LocalOptionDecide = HubInv.OptionDecide;
				}

				if (Following)
				{
					GuardSpot = spawn("HA_GuardSpot", pos, ALLOW_REPLACE);
					CommandOrb = spawn("HA_CommandOrb", pos+(0,0,56), ALLOW_REPLACE);
					if (CommandOrb)
					{
						let CommandOrbVar = HA_CommandOrb(CommandOrb);
						if (CommandOrbVar)
							CommandOrbVar.Ally = self;
					}

					if (GuardSpot)
					{
						GuardSpot.sprite = GetSpriteIndex("TNT1");
						if (MyPlayer.checkLocalView())
						{
							CommandOrb.sprite = GetSpriteIndex("CMMD");
							CommandOrb.Scale.X = 0.40;
							CommandOrb.Scale.Y = 0.40;

							if (MultiIndicator)
								MultiIndicator.sprite = GetSpriteIndex("TNT1");
						}
						//AllySay("Okay, I will stay here!");
						Following = false;

						if (HubInv)
						{
							HubInv.OptionDecide = true;
							HubInv.OptAllyDecide = self;
						}
					}
				}
				else if (!Following && !LocalOptionDecide)
				{
					if (MultiIndicator)
						MultiIndicator.sprite = GetSpriteIndex("HXNA");

					Following = true;
					GuardSpot.Destroy();
					AllySay("Okay, I'm following you!");
				}
			}
			else
			{
				NoTouching++;
				if (NoTouching > 14)
				{
					int notouchy = random[egtch](0, TouchyTouchyList.Size()-1);
					AllySay(TouchyTouchyList[notouchy]);
					NoTouching = 0;
				}
			}
		}
	}
	
	static const string TouchyTouchyList[] =
	{
		"Hey, stop touching me!",
		"Knock it off, I'm not going to obey you!",
		"If you don't stop, I'll shove you up to Korax's Chessboard.",
		"I would appreciate it, If you would stop ordering me.",
		"No, I won't switch sides, now stop touching me!",
		"You can look, but no touching.",
		"You heretic, you really are enjoying this, aren't you?",
		"Next time you touch me, I'll personally send you to Switch Hunting.",
		"I'm not an Artifact Vendor, stop touching me.",
		"Stop nagging me, I won't buy anything from you."
	};

	override void Deactivate(Actor activator) { if (activator) activate(activator); }

	Default
	{
		Species "HexenAlly";
		Obituary "%o was killed by a Hexen Ally. This wasn't supposed to happen!";
		Speed 5;
		Health 100;
		Radius 16;
		Height 64;
		Mass 200;
		PainChance 255;
		MaxStepHeight 50;
		MONSTER;
		+FRIENDLY;
		+BLOCKASPLAYER;
		+PUSHABLE;
		+ACTIVATEIMPACT;
		+CANPUSHWALLS;
		+CANUSEWALLS;
		-ACTIVATEMCROSS;
		+NOTELESTOMP;
		+NOBLOCKMONST;
		+NOTIMEFREEZE;
		+NOFEAR;
		+SEEINVISIBLE;
		+DONTHARMCLASS;
		+DONTHURTSPECIES;
		+NOTELEFRAG;
		//+JUMPDOWN;
		+NOFEAR;
		+DROPOFF
		//+THRUSPECIES
		+MTHRUSPECIES
		-COUNTKILL;
		-ISMONSTER;
		//+BUMPSPECIAL
		+USESPECIAL
		Activation THINGSPEC_Default | THINGSPEC_Switch;
	}
}

class HA_EmptyActor : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 0;
		+NOGRAVITY
		+NOINTERACTION
		+NOBLOCKMAP
		-SHOOTABLE
	}
	States
	{
		Spawn:
			#### A 1 Bright;
			Loop;
		Empty:
			CMMD A 0;
			Loop;
	}
}

class HA_GuardSpot : HA_EmptyActor {}

class HA_AllyIdentifier : HA_EmptyActor
{
	Default
	{
		Scale 0.27;
		RenderStyle "Translucent";
		Alpha 0.75;
	}

	actor Ally;
	override void Tick()
	{
		Super.Tick();
		if (Ally)
		{
			SetOrigin(Ally.pos+(0,0,63), TRUE);
			if (Ally.bKILLED)
			{
				Destroy();
			}
		}
	}
	States
	{
		Spawn:
			HXNA A 1 Bright;
			Loop;
	}
}

class HA_CommandOrb : HA_AllyIdentifier
{
	Default
	{
		Scale 1;
		RenderStyle "Normal";
		Alpha 1;
	}
	States
	{
		Spawn:
			#### A 1 Bright;
			Loop;
	}
}