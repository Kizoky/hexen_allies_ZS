// Added to PlayerPawns
class HA_FriendlyFire : Inventory
{
    Default 
	{
       +INVENTORY.UNDROPPABLE;
       +INVENTORY.UNTOSSABLE;
       +INVENTORY.PERSISTENTPOWER;
       inventory.maxamount 1;
    }
	
    override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
    {
        if (Owner && source is "HA_CoreAI")
		{
			Console.Printf("Ouchie!");
			newdamage = 0;
		}
    }
}

// HA_CoreAI spawns first, then according to what kind of class the Player is playing as 
// spawns the correspending AI (HA_Figher, HA_Cleric, HA_Mage)
class HA_CoreAI : Actor
{
	actor MyPlayer, attacker;
	string HexenType;
	int HexenTypeNumeric;
	bool gotType;
	
	int CountdownToDeath;
	bool CertainDeath;
	
	bool IsMelee;
	bool CDtoTele;
	
	string SpriteName;
	
	int CDtoSeekEnemy;

	string ActiveWeapon;
	
	virtual void SearchForPlayer()
	{
		if (MyPlayer) return;
		
		BlockThingsIterator it = BlockThingsIterator.Create (self, 256);
		
		while (it.Next () && it.Thing) 
		{
			let next = it.Thing;
			
			if (next)
			{
				if (next is "PlayerPawn" && next != self && !(next is "HA_CoreAI"))
				{
					MyPlayer = next;
					
					if (MyPlayer && !gotType)
					{
						MyPlayer.A_GiveInventory("HA_FriendlyFire", 1);
						
						/* debug
						HexenType = "Fighter";
						gotType = true;
						IsMelee = false;
						SpriteName = HexenAllySprite[2];
						*/
						
						string PlayerClass = MyPlayer.GetClassName();
						int Available[2];
						
						int j = 0;
						for (int i = 0; i < HexenListName.Size(); i++)
						{
							if (!(PlayerClass ~== HexenListName[i]))
							{
								Available[j] = i;
								j++;
							}
						}
						
						// not efficent way of doing this but whatever
						int Chosen = randompick[choseone](Available[0], Available[1]);

						actor SpawnAI = spawn(HexenSpawnList[Chosen], self.pos, ALLOW_REPLACE);

						if (SpawnAI)
						{
							let SpawnedAI = HA_CoreAI(SpawnAI);
							if (SpawnedAI)
							{
								SpawnedAI.MyPlayer = MyPlayer;
								SpawnedAI.HexenType = HexenAllyList[Chosen];
								SpawnedAI.HexenTypeNumeric = Chosen;
								SpawnedAI.AllyChat(String.Format("I'm a %s", SpawnedAI.HexenType));

								SpawnedAI.gotType = true;

								SpawnedAI.SetStateLabel("See");

								Destroy();
								break;
							}
						}
					}
				}
			}
		}
	}
	
	static const class<actor> HexenSpawnList[] =
	{
		"HA_Fighter",
		"HA_Cleric",
		"HA_Mage"
	};

	static const string HexenListName[] =
	{ // Uses actual PlayerClass names
		"FighterPlayer",
		"ClericPlayer",
		"MagePlayer"
	};
	
	static const string HexenAllyList[] =
	{
		"Fighter",
		"Cleric",
		"Mage"
	};
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SearchForPlayer();
		spawn("Teleportfog",pos);
	}
	
	virtual void A_MovementChase(actor targ)
	{
		if (targ)
		{
			int oldDir = moveDir;
			moveDir = (8 * AngleTo(targ, true) / 360) % 8;
			if (!TryWalk())
			{
				moveDir = oldDir;
				if(!TryWalk())
				{
					for (int i = 1; i <= 4; ++i)
					{
						moveDir = (oldDir + i) % 8;
						if (TryWalk())
							break;
			
						moveDir = (oldDir - i) % 8;
						if (TryWalk())
							break;
					}
				}
			}
		
			// Face movement direction
			angle = 360 * moveDir / 8;
			if (angle > 180)
				angle -= 360;
		}
	}
	
	int TimeBeforeRandomTurn, TimeProbablyGotStuck;
	virtual void A_FollowerChase()
	{
		if ((target && target.bKILLED) || (target && target is "PlayerPawn"))
		{
			target = null;
			TimeProbablyGotStuck = 0;
		}
		
		// Follow our player
		if (!target && MyPlayer)
		{
			if (Distance3D(MyPlayer) > 100)
			{
				vector2 PlayerPos = (MyPlayer.pos.x,MyPlayer.pos.y);
				if (CheckSight (MyPlayer, SF_SeePastShootableLines) && CheckMove(PlayerPos, flags: PCM_NOLINES))
				{
					Angle = AngleTo(MyPlayer);
					A_MovementChase(MyPlayer);
					A_Recoil(-1.75);
				}
				else
				{
					// Note: There's a small.. or rather huge chance the AI will get stuck for some reason while
					// trying to catch up to the Player, we'll countdown to 15 and teleport it back to the Player
					if (TimeProbablyGotStuck == 0)
					{
						TimeProbablyGotStuck = level.time + 35 * 15;
					}
					else if (level.time > TimeProbablyGotStuck)
					{
						spawn("teleportfog", pos);
						SetOrigin(MyPlayer.pos+(0,0,50), TRUE);
						spawn("teleportfog", pos);
						TimeProbablyGotStuck = 0;
						CDtoTele = false;
					}
					
					// Move towards Player
					A_Recoil(-3);
					A_MovementChase(MyPlayer);
				}
			}
			else
			{
				CDtoTele = false;
				TimeProbablyGotStuck = 0;
				frame = 0;
				// random angle during staying in one place
				if (level.time > TimeBeforeRandomTurn)
				{
					angle = random[ang](-360,360);
					TimeBeforeRandomTurn = level.time + 35 * random[tiem](1,4);
				}
			}
		}
		
		// Look for enemies
		if (!target)
		{
			LookForEnemies(false);
			
			// Acquired a new target
			if (target)
			{
				if (Distance3D(target) > 750)
					target = null; return;
			}
			
		}
		
		// Active target we have
		if (target && !target.bKILLED)
		{
			if (MyPlayer)
			{
				if (Distance3D(MyPlayer) > 425)
				{
					if (!CDtoTele)
					{
						TimeProbablyGotStuck = level.time + 35 * 6;
						CDtoTele = true;
					
					}
						
					if (CDtoTele && level.time > TimeProbablyGotStuck)
					{
						CDtoTele = false;
						target = null;
						spawn("teleportfog", pos);
						SetOrigin(MyPlayer.pos+(0,0,50), TRUE);
						spawn("teleportfog", pos);
						TimeProbablyGotStuck = 0;
						return;
					}
				}
				else
					CDtoTele = false;
			}
			
			// target is not in line of sight, look for a new target
			// (so they won't mindlessly attack walls)
			/*
			if (!(IsVisible (target, true)))
			{
				target = null;
				Console.Printf("Out of sight");
				return;
			}
			*/
			
			A_MovementChase(target);
			
			A_AllyDodge();
			
			// Closing in or closing out
			
			if (!IsMelee)
			{
				if (target)
				{
					if (Distance3D(target) > 150)
						A_Recoil(-1.75);
					else
						A_Recoil(1.75);
				}
			}
			else
			{
				if (target && Distance3D(target) > 25)
					A_Recoil(-1.75);
			}
			
			
			A_AllyShoot();
		
		}
	}
	
	virtual void A_AllyDodge()
	{
		if (!target) return;
		
		if (!(level.time % 2 == 0)) return;
		
		FLineTraceData lineData;
		double ThrustValue = 0.0001;
		
		// Let's check if we can move right or left, is there a better way to do this?
		if (InStateSequence(target.CurState, target.ResolveState("Missile")) || InStateSequence(target.CurState, target.ResolveState("Melee")))
		{
			bool HitWall1 = false;
			bool HitWall2 = false;
			
			LineTrace(angle+90,150,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
			{
				//Console.Printf("hit into a wall plus");
				Thrust(ThrustValue, Angle - 90);
				HitWall1 = true;
			}
			
			LineTrace(angle-90,150,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
			{
				//Console.Printf("hit into a wall minus");
				Thrust(ThrustValue, Angle + 90);
				HitWall2 = true;
			}
			
			// Not fool proof, they will still sometimes run into a projectile unfortunately
			if (!HitWall1 && !HitWall2)
			{
				Thrust(ThrustValue, Angle + 90);
			}
			
			// Oh no, they are trying to melee attack!
			if (InStateSequence(target.CurState, target.ResolveState("Melee")))
			{
				if (target.target && target.target == self)
				{
					// Can we even dodge behind?
					LineTrace(-angle,150,0, offsetz: 5, data: LineData);
					if (LineData.HitType == TRACE_HitWall || LineData.HitType == TRACE_HitActor)
					{
						bool rr = random[ly](0,1);
						if (rr)
							Thrust(ThrustValue, Angle - 90);
						else
							Thrust(ThrustValue, Angle + 90);
						
						return;
					}
					
					A_Recoil(3.25);
				}
			}
		}
	}
	
	virtual void HA_RangeShoot()
	{
		if (!IsMelee && CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0))
		{
			// Implement it in an actor inheriting from HA_CoreAI
		}
	}

	virtual void HA_MeleeShoot()
	{
		if (IsMelee && CheckMeleeRange())
		{
			// Implement it in an actor inheriting from HA_CoreAI
		}
	}

	virtual void A_AllyShoot()
	{
		if (!target) return;
		
		HA_RangeShoot();
		HA_MeleeShoot();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (source)
		{
			if (!(source is "PlayerPawn"))
			{
				attacker = source;
				target = attacker;
			}
			else
			{
				return Super.DamageMobj(inflictor,source,0,mod,flags,angle);
			}
		}
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}

	void AllyChat(string msg)
	{
		Console.Printf("\c[red]%s's \c[white]%s\c*: %s", MyPlayer.player.GetUserName(), HexenType, msg);
		A_StartSound("misc/chat", CHAN_7, attenuation:ATTN_NONE);
	}
	
	void AllyDied(string DeathType)
	{
		string Cause = "killed";

		if (DeathType ~== "Normal")
			Cause = "killed";
		if (DeathType ~== "Crispy")
			Cause = "brutally killed";
		if (DeathType ~== "Ice")
			Cause = "frozen to death";
		if (DeathType ~== "Burn")
			Cause = "burned to death";

		Console.Printf("\c[red]%s's \c[white]%s\c[yellow] was %s by a(n) %s", MyPlayer.player.GetUserName(), HexenType, Cause, attacker.GetClassName());
	}
	
	virtual void HA_Tick()
	{
		
		A_AllyDodge();
		
		if (!(pos.z ~== floorz))
			bTHRUSPECIES = true;
		else
			bTHRUSPECIES = false;
		
		/*
		if (bKILLED && MyPlayer && CountdownToDeath != 0 && level.time > CountdownToDeath)
		{
			spawn("TeleportFog",pos);
			Console.Printf("A dead follower has been teleported into it's dimension back...");
			Destroy();
		}
		*/
		
	}
	
	override void Tick()
	{
		Super.Tick();
		
		HA_Tick();
	}

	Default
	{
		Species "HexenAlly";
		Speed 5;
		Health 100;
		Radius 16;
		Height 64;
		Mass 100;
		PainChance 255;
		MONSTER;
		+FRIENDLY;
		+BLOCKASPLAYER;
		+PUSHABLE;
		+ACTIVATEIMPACT;
		+CANPUSHWALLS;
		+CANUSEWALLS;
		-ACTIVATEMCROSS;
		+NOTELESTOMP;
		+NOBLOCKMONST;
		+NOTIMEFREEZE;
		+NOFEAR;
		+SEEINVISIBLE;
		+DONTHARMCLASS;
		+NOTELEFRAG
		//+THRUSPECIES
		+MTHRUSPECIES
		-COUNTKILL;
		-ISMONSTER;
	}
}
