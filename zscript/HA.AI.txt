// HA_CoreAI spawns first, then according to what kind of class the Player is playing as 
// spawns the correspending AI (HA_Figher, HA_Cleric, HA_Mage)
class HA_CoreAI : Actor
{
	// cross-mod specific variables
	bool WoC;

	// Hexen Allies variables
	actor MyPlayer, attacker, GuardSpot;
	string HexenType, HexenColorTrnsl, HexenColor;
	bool gotType, Restored;
	int SpawnSlot;
	
	int CountdownToDeath;
	
	bool IsMelee, IsRanged;
	bool CDtoTele;

	string ActiveWeapon;

	bool isInAir;
	double LastAirZ;

	bool Following;

	int WeaponCapability;
	int Mana, ManaPerSeconds;
	
	virtual void HA_PostBeginPlay() {}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (!MyPlayer)
		{
			Console.Printf("\c[red]Hexen Allies:\c[yellow] Summoning via console isn't supported!");
			Destroy();
			return;
		}

		spawn("Teleportfog",pos);
		Following = true;
		//Mana = 0;
		ManaPerSeconds = 80;

		if (Multiplayer)
		{
			let identifier = spawn("HA_AllyIdentifier", pos);
			if (identifier)
			{
				let identify = HA_AllyIdentifier(identifier);
				if (identify)
				{
					identify.Ally = self;
				}
			}
		}

		HA_PostBeginPlay();
	}
	
	virtual void A_MovementChase(actor targ)
	{
		if (targ)
		{
			/* Jumping
			// Currently buggy so it's disabled
			FLineTraceData lineData;
			LineTrace(angle,50,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitWall)
			{
				if (pos.z ~== floorz)
				{
					Angle = AngleTo(targ);
					A_ChangeVelocity (0, 0, 7, 0);
					A_Recoil(-1.00);
				}
			}
			*/

			int oldDir = moveDir;
			moveDir = (8 * AngleTo(targ, true) / 360) % 8;
			if (!TryWalk())
			{
				moveDir = oldDir;
				if(!TryWalk())
				{
					for (int i = 1; i <= 4; ++i)
					{
						moveDir = (oldDir + i) % 8;
						if (TryWalk())
							break;

						moveDir = (oldDir - i) % 8;
						if (TryWalk())
							break;
					}
				}
			}

			// Face movement direction
			angle = 360 * moveDir / 8;
			if (angle > 180)
				angle -= 360;

		}
	}
	
	void FollowActor(actor MyPlayer)
	{
		if (Distance3D(MyPlayer) > 100)
		{
			vector2 PlayerPos = (MyPlayer.pos.x,MyPlayer.pos.y);
			if (CheckSight (MyPlayer, SF_SeePastShootableLines) && CheckMove(PlayerPos, flags: PCM_NOLINES))
			{
				A_MovementChase(MyPlayer);
				Angle = AngleTo(MyPlayer);
				A_Recoil(-1.75);
			}
			else
			{
				// Note: There's a small.. or rather huge chance the AI will get stuck for some reason while
				// trying to catch up to the Player, we'll countdown to 15 and teleport it back to the Player
				if (TimeProbablyGotStuck == 0)
				{
					TimeProbablyGotStuck = level.time + 35 * 15;
				}
				else if (level.time > TimeProbablyGotStuck)
				{
					spawn("teleportfog", pos);
					SetOrigin(MyPlayer.pos+(0,0,50), TRUE);
					spawn("teleportfog", pos);
					TimeProbablyGotStuck = 0;
					CDtoTele = false;
				}
				
				// Move towards Player
				A_Recoil(-3);
				A_MovementChase(MyPlayer);
			}
		}
		else
		{
			CDtoTele = false;
			TimeProbablyGotStuck = 0;
			frame = 0;
			// random angle during staying in one place
			if (level.time > TimeBeforeRandomTurn)
			{
				angle = random[ang](-360,360);
				TimeBeforeRandomTurn = level.time + 35 * random[tiem](1,4);
			}
		}
	}

	int TimeBeforeRandomTurn, TimeProbablyGotStuck;
	virtual void A_FollowerChase()
	{
		if ((target && target.bKILLED) || (target && target is "PlayerPawn"))
		{
			target = null;
			TimeProbablyGotStuck = 0;
		}
		
		// Follow our player, or guard Area
		if (!target && MyPlayer)
		{
			if (Following)
				FollowActor(MyPlayer);
			else if (!Following && GuardSpot)
				FollowActor(GuardSpot);
		}
		
		// Look for enemies
		if (!target)
		{
			LookForEnemies(false);
			
			// Acquired a new target
			if (target)
			{
				// Target is too far away
				if (Distance3D(target) > 750)
					target = null; return;
			}
			
		}
		
		// Active target we have
		if (target && !target.bKILLED)
		{
			if (MyPlayer)
			{
				if (Distance3D(MyPlayer) > 425)
				{
					if (!CDtoTele)
					{
						TimeProbablyGotStuck = level.time + 35 * 6;
						CDtoTele = true;
					}
						
					if (CDtoTele && level.time > TimeProbablyGotStuck)
					{
						CDtoTele = false;
						target = null;
						spawn("teleportfog", pos);
						SetOrigin(MyPlayer.pos+(0,0,50), TRUE);
						spawn("teleportfog", pos);
						TimeProbablyGotStuck = 0;
						return;
					}
				}
				else
					CDtoTele = false;
			}
			
			// target is not in line of sight, look for a new target
			// (so they won't mindlessly attack walls)
			/*
			if (!(IsVisible (target, true)))
			{
				target = null;
				Console.Printf("Out of sight");
				return;
			}
			*/
			
			A_MovementChase(target);
			
			A_AllyDodge();
			
			// Closing in or closing out
			
			if (!IsMelee)
			{
				if (target)
				{
					if (Distance3D(target) > 150)
						A_Recoil(-1.75);
					else
						A_Recoil(1.75);
				}
			}
			else
			{
				if (target && Distance3D(target) > 25)
					A_Recoil(-1.75);
			}
			
			
			A_AllyShoot();
		
		}
	}
	
	virtual void A_AllyDodge()
	{
		if (!target) return;
		
		if (!(level.time % 1 == 0)) return;

		// Special handling for WoC, possibly fixes issues with other mods too
		// todo WoC: Check the base monster actor and check for specific states
		bool dodge = false;
		if (WoC)
		{
			if (!target.InStateSequence(target.CurState, target.ResolveState("Spawn")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("Pain")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("Death")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("XDeath")) &&
				!target.InStateSequence(target.CurState, target.ResolveState("See")))
			{
				dodge = true;
			}
		}
		
		FLineTraceData lineData;
		double ThrustValue = 3;
		
		if (!WoC)
		{
			if (target.InStateSequence(target.CurState, target.ResolveState("Missile")) || 
				target.InStateSequence(target.CurState, target.ResolveState("Melee")))
			{
				dodge = true;
			}
		}
		
		// Let's check if we can move right or left, is there a better way to do this?
		if (dodge)
		{
			bool HitWall1 = false;
			bool HitWall2 = false;
			
			LineTrace(angle+90,150,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
			{
				//Console.Printf("hit into a wall plus");
				angle = AngleTo(target);
				Thrust(ThrustValue, Angle - 90);
				HitWall1 = true;
			}
			
			LineTrace(angle-90,150,0, offsetz: 5, data: LineData);
			if (LineData.HitType == TRACE_HitActor || LineData.HitType == TRACE_HitWall)
			{
				//Console.Printf("hit into a wall minus");
				angle = AngleTo(target);
				Thrust(ThrustValue, Angle + 90);
				HitWall2 = true;
			}
			
			// Not fool proof, they will still sometimes run into a projectile unfortunately
			/*
			if (!HitWall1 && !HitWall2)
			{
				Thrust(ThrustValue, Angle + 90);
			}
			*/
			
			// Oh no, they are trying to melee attack!
			if (InStateSequence(target.CurState, target.ResolveState("Melee")) && !HitWall1 && !HitWall2)
			{
				if (target.target && target.target == self)
				{
					// Can we even dodge behind?
					LineTrace(-angle,150,0, offsetz: 5, data: LineData);
					if (LineData.HitType == TRACE_HitWall || LineData.HitType == TRACE_HitActor)
					{
						bool rr = random[ly](0,1);
						if (rr)
							Thrust(ThrustValue, Angle - 90);
						else
							Thrust(ThrustValue, Angle + 90);
						
						return;
					}
					
					A_Recoil(1.25);
				}
			}
		}
	}
	
	virtual void HA_RangeShoot()
	{
		/*
		if (!IsMelee && CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0))
		{
			// Implement it in an actor inheriting from HA_CoreAI
		}
		*/
	}

	virtual void HA_MeleeShoot()
	{
		/*
		if (IsMelee && CheckMeleeRange())
		{
			// Implement it in an actor inheriting from HA_CoreAI
		}
		*/
	}

	virtual void A_AllyShoot()
	{
		if (!target) return;
		
		HA_RangeShoot();
		HA_MeleeShoot();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (source)
		{
			if (source is "PlayerPawn" || source is "HA_CoreAI")
			{
				return Super.DamageMobj(inflictor,source,0,mod,flags,angle);
			}

			if (!source.bIsMonster)
			{
				attacker = null;
				return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
			}

			attacker = source;
			target = attacker;
			angle = AngleTo(target);
		}
		else
			attacker = null;
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}

	// For the chat
	void AllySay(string msg)
	{
		if (HexenColor ~== "Green") 
			Console.Printf("\c[white]%s's \c[green]%s\c*: %s", MyPlayer.player.GetUserName(), HexenType, msg);
		if (HexenColor ~== "Red")
			Console.Printf("\c[white]%s's \c[red]%s\c*: %s", MyPlayer.player.GetUserName(), HexenType, msg);
		if (HexenColor ~== "Blue")
			Console.Printf("\c[white]%s's \c[blue]%s\c*: %s", MyPlayer.player.GetUserName(), HexenType, msg);
		if (HexenColor ~== "Silver")
			Console.Printf("\c[white]%s's \c[white]%s\c*: %s", MyPlayer.player.GetUserName(), HexenType, msg);
		if (HexenColor ~== "Yellow")
			Console.Printf("\c[white]%s's \c[yellow]%s\c*: %s", MyPlayer.player.GetUserName(), HexenType, msg);

		A_StartSound("misc/chat", CHAN_7, attenuation:ATTN_NONE);
	}
	
	// Prints out Obituary (as if they were a Player) to the chat
	void AllyDied()
	{
		string AIname = "Ally Death: Failed to get Ally's Color! (HexenColor variable)";

		if (HexenColor ~== "Green") 
			AIname = String.Format("\c[white]%s's \c[green]%s", MyPlayer.player.GetUserName(), HexenType);
		if (HexenColor ~== "Red")
			AIname = String.Format("\c[white]%s's \c[red]%s", MyPlayer.player.GetUserName(), HexenType);
		if (HexenColor ~== "Blue")
			AIname = String.Format("\c[white]%s's \c[blue]%s", MyPlayer.player.GetUserName(), HexenType);
		if (HexenColor ~== "Silver")
			AIname = String.Format("\c[white]%s's \c[white]%s", MyPlayer.player.GetUserName(), HexenType);
		if (HexenColor ~== "Yellow")
			AIname = String.Format("\c[white]%s's \c[yellow]%s", MyPlayer.player.GetUserName(), HexenType);

		if (attacker)
		{
			string ob = attacker.GetObituary(self, attacker, "none", false);
			ob = StringTable.Localize (ob);
			ob.Replace("%o ", "");

			Console.Printf("%s \c[yellow]%s", AIname, ob);
		}
		// Died to World
		else
			Console.Printf("%s has died.", AIname);
	}

	string AllyName()
	{
		return String.Format("%s's %s", MyPlayer.player.GetUserName(), HexenType);
	}
	
	virtual void HA_Tick() {}
	
	override void Tick()
	{
		Super.Tick();
		
		if (!bKILLED)
		{
			A_AllyDodge();

			if (level.time % ManaPerSeconds == 0)
			{
				if (Mana < 200)
				{
					Mana += 1;
				}

				//Console.Printf("Mana: %d", Mana);
			}
		}
		
		// Monsters are more likely to get stuck if they spawn in-air
		if (!(pos.z ~== floorz))
			bTHRUSPECIES = true;
		else
			bTHRUSPECIES = false;
		
		// Play a Landing or Grunt sound
		// Note: in Doom games it's based on the velocity Z (falling speed)
		// not the difference between last position Z and floor Z
		// But because I believe it's unreliable with non-Players this should do the job plenty
		if (!bKILLED)
		{
			if (pos.z > floorz)
			{
				IsInAir = true;
				if (LastAirZ == 0)
				{
					LastAirZ = pos.z;
				}
			}
			else if (pos.z ~== floorz)
			{
				if (IsInAir)
				{
					if (IsActorPlayingSound(CHAN_VOICE)) return;

					double Diff = floorz-LastAirZ;

					if (-Diff > 40 && -Diff < 69)
					{
						A_StartSound("PlayerLand", CHAN_VOICE);
					}

					if (-Diff > 69)
					{
						string Sound = String.Format("Player%sGrunt", HexenType);
						A_StartSound(Sound, CHAN_VOICE);
					}

					IsInAir = false;
					LastAirZ = 0;
				}
			}
		}

		HA_Tick();
	}

	override void Activate(Actor activator)
	{
		if (activator && MyPlayer && activator == MyPlayer)
		{
			if (Following)
			{
				GuardSpot = spawn("HA_GuardSpot", pos, ALLOW_REPLACE);

				if (GuardSpot)
				{
					AllySay("Okay, I will stay here!");
					Following = false;
				}
			}
			else if (!Following)
			{
				Following = true;
				GuardSpot.Destroy();
				AllySay("Okay, I'm following you!");
			}
		}
	}
	
	override void Deactivate(Actor activator)
	{
		if (activator)
		{
			activate(activator);
		}
	}

	Default
	{
		Species "HexenAlly";
		Obituary "%o was killed by a Hexen Ally. This wasn't supposed to happen!";
		Speed 5;
		Health 100;
		Radius 16;
		Height 64;
		Mass 100;
		PainChance 255;
		MaxStepHeight 50;
		MONSTER;
		+FRIENDLY;
		+BLOCKASPLAYER;
		+PUSHABLE;
		+ACTIVATEIMPACT;
		+CANPUSHWALLS;
		+CANUSEWALLS;
		-ACTIVATEMCROSS;
		+NOTELESTOMP;
		+NOBLOCKMONST;
		+NOTIMEFREEZE;
		+NOFEAR;
		+SEEINVISIBLE;
		+DONTHARMCLASS;
		+DONTHURTSPECIES;
		+NOTELEFRAG;
		//+JUMPDOWN;
		+NOFEAR;
		+DROPOFF
		//+THRUSPECIES
		+MTHRUSPECIES
		-COUNTKILL;
		-ISMONSTER;
		//+BUMPSPECIAL
		+USESPECIAL
		Activation THINGSPEC_Default | THINGSPEC_Switch;
	}
}

class HA_GuardSpot : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 0;
		+NOGRAVITY
		+NOINTERACTION
		+NOBLOCKMAP
		-SHOOTABLE
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
	}
}

class HA_AllyIdentifier : HA_GuardSpot
{
	Default
	{
		Scale 0.27;
		RenderStyle "Translucent";
		Alpha 0.75;
	}

	actor Ally;
	override void Tick()
	{
		Super.Tick();
		if (Ally)
		{
			SetOrigin(Ally.pos+(0,0,63), TRUE);
			if (Ally.bKILLED)
			{
				Destroy();
			}
		}
	}
	States
	{
		Spawn:
			HXNA A 1 Bright;
			Loop;
	}
}