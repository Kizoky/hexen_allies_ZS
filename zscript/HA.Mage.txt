// Mage AI
class HA_Mage : HA_CoreAI
{
	static const string WeaponList[] =
	{
		"Wand",
		"Frost",
		"Lightning",
		"Blood"
	};

	enum UnlockedWep
	{
		Wand = 1,
		Frost,
		Lightning,
		Blood
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		ActiveWeapon = "Wand";
		IsMelee = false;
	}

	override void Tick()
	{
		Super.Tick();
		HA_Tick();

		if (ActiveWeapon ~== "Lightning")
		{
			if (random[LightningReady]() > 250)
			{
				if (IsActorPlayingSound(CHAN_WEAPON)) return;
				A_StartSound ("MageLightningReady", CHAN_WEAPON);
			}
		}
	}

	private void MStaffSpawn (double angle, Actor alttarget)
	{
		FTranslatedLineTarget t;

		Actor mo = SpawnPlayerMissile ("MageStaffFX2", angle, pLineTarget:t);
		if (mo)
		{
			mo.target = self;
			if (t.linetarget && !t.unlinked)
				mo.tracer = t.linetarget;
			else
				mo.tracer = alttarget;
		}
	}

	// Mage cannot do melee attack
	override void HA_MeleeShoot() {}

	override void HA_RangeShoot()
	{
		int asd = random[asd](0, WeaponList.Size()-1);
		ActiveWeapon = WeaponList[asd];

		angle = AngleTo(target, true);
		if (!CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0)) return;
		if (InStateSequence(CurState, ResolveState("Missile"))) return;

		// ================================= Wand
		if (ActiveWeapon ~== "Wand")
		{
			if (random[chanceshoot]() < 75)
			{
				Actor proj = A_SpawnProjectile("MageWandMissile", 55);
				if (proj)
				{
					proj.bMTHRUSPECIES = true;
					vel.xy = (0,0);
					SetStateLabel("Missile");
				}
			}
		}

		// ================================= Frost Cone 
		if (ActiveWeapon ~== "Frost")
		{
			if (random[chanceshoot]() > 175)
			{
				bool conedone=false;
				FTranslatedLineTarget t;

				A_StartSound ("MageShardsFire", CHAN_BODY);

				int damage = random[MageCone](90, 105);
				for (int i = 0; i < 16; i++)
				{
					double ang = angle + i*(45./16);
					double slope = AimLineAttack (ang, DEFMELEERANGE, t, 0., ALF_CHECK3D);
					if (t.linetarget)
					{
						t.linetarget.DamageMobj (self, self, damage, 'Ice', DMG_USEANGLE, t.angleFromSource);
						conedone = true;
						vel.xy = (0,0);
						SetStateLabel("Missile");
						break;
					}
				}

				// didn't find any creatures, so fire projectiles
				if (!conedone)
				{
					Actor mo = SpawnPlayerMissile ("FrostMissile");
					if (mo)
					{
						mo.special1 = FrostMissile.SHARDSPAWN_LEFT|FrostMissile.SHARDSPAWN_DOWN|FrostMissile.SHARDSPAWN_UP|FrostMissile.SHARDSPAWN_RIGHT;
						mo.special2 = 3; // Set sperm count (levels of reproductivity)
						mo.target = self;
						mo.args[0] = 3;		// Mark Initial shard as super damage
					}
					vel.xy = (0,0);
					SetStateLabel("Missile");
				}
			}
		}

		// ================================= Lightning Arc of Death
		if (ActiveWeapon ~== "Lightning")
		{
			if (random[chanceshoot]() > 225)
			{
				class<Actor> floor = "LightningFloor";
				class<Actor> ceiling = "LightningCeiling";

				LightningFloor fmo = LightningFloor(SpawnPlayerMissile (floor));
				LightningCeiling cmo = LightningCeiling(SpawnPlayerMissile (ceiling));
				if (fmo)
				{
					fmo.special1 = 0;
					fmo.lastenemy = cmo;
					fmo.A_LightningZap();
				}
				if (cmo)
				{
					cmo.tracer = NULL;
					cmo.lastenemy = fmo;
					cmo.A_LightningZap();
				}
				A_StartSound ("MageLightningFire", CHAN_BODY);

				vel.xy = (0,0);
				SetStateLabel("Missile");
			}
		}

		// ================================= Bloodscourge
		if (ActiveWeapon ~== "Blood")
		{
			if (random[chanceshoot]() > 225)
			{
				FTranslatedLineTarget t;

				// [RH] Let's try and actually track what the player aimed at
				AimLineAttack (angle, PLAYERMISSILERANGE, t, 32.);
				if (t.linetarget == NULL)
				{
					t.linetarget = RoughMonsterSearch(10, true, true);
				}
				MStaffSpawn (angle, t.linetarget);
				MStaffSpawn (angle-5, t.linetarget);
				MStaffSpawn (angle+5, t.linetarget);
				A_StartSound ("MageStaffFire", CHAN_BODY);

				vel.xy = (0,0);
				SetStateLabel("Missile");
			}
		}
	}

	Default
	{
		Species "HexenAlly";
		PainSound "PlayerMagePain";
		DeathSound "PlayerMageNormalDeath";
	}
	States
	{
	Spawn:
		MAGE AAA 4;
		Loop;
	See:
		MAGE A 0 A_AlertMonsters(184, AMF_TARGETEMITTER);
		MAGE ABCD 4 A_FollowerChase();
		Loop;
	Missile:
		Goto Melee;
	Melee:
		MAGE E 0 A_AlertMonsters(512, AMF_TARGETEMITTER);
		MAGE E 4 A_AllyDodge();
		MAGE F 17 A_AllyDodge(); //was 8
		MAGE E 2 A_AllyDodge();
		Goto See;
	Pain:
		MAGE G 4;
		MAGE G 4 A_Pain;
		Goto See;
	Death:
		TNT1 A 0
		{
			CountdownToDeath = level.time + 35 * 5;
			AllyDied();
		}
		MAGE H 6;
		MAGE I 6 A_Scream;
		MAGE JK 6;
		MAGE L 6 A_NoBlocking;
		MAGE M 6;
		MAGE N -1;
		Stop;		
	XDeath:
		TNT1 A 0
		{
			CountdownToDeath = level.time + 35 * 5;
			AllyDied();
		}
		MAGE O 5 A_Scream;
		MAGE P 5;
		MAGE R 5 A_NoBlocking;
		MAGE STUVW 5;
		MAGE X -1;
		Stop;
	Ice:
		TNT1 A 0 AllyDied();
		MAGE Y 5 A_FreezeDeath;
		MAGE Y 1 A_FreezeDeathChunks;
		Wait;
	Burn:
		TNT1 A 0 AllyDied();
		FDTH E 5 BRIGHT A_StartSound("*burndeath");
		FDTH F 4 BRIGHT;
		FDTH G 5 BRIGHT;
		FDTH H 4 BRIGHT A_Scream;
		FDTH I 5 BRIGHT;
		FDTH J 4 BRIGHT;
		FDTH K 5 BRIGHT;
		FDTH L 4 BRIGHT;
		FDTH M 5 BRIGHT;
		FDTH N 4 BRIGHT;
		FDTH O 5 BRIGHT;
		FDTH P 4 BRIGHT;
		FDTH Q 5 BRIGHT;
		FDTH R 4 BRIGHT;
		FDTH S 5 BRIGHT A_NoBlocking;
		FDTH T 4 BRIGHT;
		FDTH U 5 BRIGHT;
		FDTH V 4 BRIGHT;
		ACLO E 35 A_CheckPlayerDone;
		Wait;
		ACLO E 8;
		Stop;	
	
	}
}
