class HA_Blessed : Inventory 
{
	Actor LastAttacker;
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (owner && source)
		{
			LastAttacker = source;
		}
	}
}

// not directly inherited from HA_Blessed intentionally
class HA_Uni : Inventory
{
	Actor LastAttacker;
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (owner && source)
		{
			LastAttacker = source;
		}
	}
}

class HexenAlliesCoreHandler : StaticEventHandler 
{
	Array<Actor> Allies;
	Array<Actor> Bosses;
	bool BossSpawn;
	
	IWADInfo GameIWAD;
	MODInfo GameMOD;
	
	struct MODInfo
	{
		// Add mods here...
		bool isWoC;
	}
	
	struct IWADInfo
	{
		bool isHeretic;
		bool isHexen;
	}
	
	override void OnRegister()
	{
		Console.Printf("\c[red]Hexen Allies: \c[yellow]Detecting IWAD and mods...");
		Console.Printf("\c[yellow]------------------------------------------------------------------");
		
		/*
		if ( gameinfo.gametype == GAME_Doom )
        {
            bool d2Sprite = int(Texman.CheckForTexture("FATTA1", TexMan.Type_Sprite)) != -1;
            bool tntPatch = int(Texman.CheckForTexture("TYWHEEL1", TexMan.Type_WallPatch)) != -1;
            bool plutPatch = int(Texman.CheckForTexture("A-CAMO3", TexMan.Type_Wall)) != -1;
            if ( !d2Sprite )
				Console.Printf("\c[red]Hexen Allies: \c[yellow]DOOM IWAD \c[red]detected!");
            else if ( tntPatch && plutPatch )
                Console.Printf("\c[red]Hexen Allies: \c[yellow]WADSMOOSH \c[red]detected!");
            else if ( tntPatch )
                Console.Printf("\c[red]Hexen Allies: \c[yellow]TNT Evilution IWAD \c[red]detected!");
            else if ( plutPatch )
                Console.Printf("\c[red]Hexen Allies: \c[yellow]Plutonia Experiment IWAD \c[red]detected!");
            else
                Console.Printf("\c[red]Hexen Allies: \c[yellow]DOOM II IWAD \c[red]detected!");
        }
		*/
		
		if ( gameinfo.gametype == GAME_Hexen )
		{
			Console.Printf("\c[red]Hexen Allies: \c[yellow]Hexen IWAD \c[red]detected!");
			GameIWAD.isHexen = true;
		}
		else if ( gameinfo.gametype == GAME_Heretic )
		{
			Console.Printf("\c[red]Hexen Allies: \c[yellow]Heretic IWAD \c[red]detected!");
			GameIWAD.isHeretic = true;
		}
		else
		{
			Console.Printf("\c[yellow]unsupported IWAD \c[red]detected!");
		}
		
		if (!GameIWAD.isHexen && !GameIWAD.isHeretic)
		{
			ThrowAbortException("\n\c[yellow]------------------------------------------------------------------\nOnly \c[red]Hexen\c[yellow] or \c[red]Heretic\c[yellow] are supported!\nIf you believe this is a mistake please contact Kizoky\n------------------------------------------------------------------");
			return;
		}
		
		// Wrath of Cronos
		string WoCItem = "WoC_Stat";
		class<Actor> woc = WoCItem;
		if (woc)
		{
			Console.Printf("\c[red]Hexen Allies: \c[yellow]Wrath of Cronos \c[red]detected!");
			GameMOD.isWoC = true;
		}
	}
	
	void BossSay(string msg, actor Boss)
	{
		string BossName = Boss.GetTag();

		Console.Printf("%s\c*: %s", BossName, msg);
		Boss.A_StartSound("misc/chat", CHAN_7, attenuation:ATTN_NONE);
	}

	override void WorldTick()
	{
		Super.WorldTick();
		if (level.time > 35 * 7 && BossSpawn)
		{
			// Based on current Total Allies
			int TotalAllies = 0;
			for (uint i = 0; i < MAXPLAYERS; i++)
			{
				if (Players[i].mo)
				{
					let HubInv = HA_AIHub(Players[i].mo.FindInventory("HA_AIHub"));
					if (HubInv)
					{
						TotalAllies += HubInv.TotalNum;
					}
				}
			}

			for (uint i = 0; i < Bosses.size(); i++)
			{
				if (Bosses[i] && !Bosses[i].bKILLED && !Bosses[i].FindInventory("HA_Blessed"))
				{
					Bosses[i].Health += TotalAllies * 100;
					Bosses[i].PainChance -= TotalAllies * 4;
					Bosses[i].A_GiveInventory("HA_Blessed", 1);
					BossSay("The Game Master has blessed me powers!", Bosses[i]);
				}
			}

			BossSpawn = false;
		}
	}
	
	// Inventory items sometimes will get their amount stuck when using the Ally Menu
	// Ideally this is not the best way to fix it
	void StuckSoulsFix(PlayerPawn Player)
	{
		Player.A_GiveInventory("HA_Soul", 1);
		Player.A_TakeInventory("HA_Soul", 1);
	}
	
	override void NetworkProcess(ConsoleEvent e)
    {
		// Triggered from settings dialog when you choose a new color
		if (e.Name.IndexOf("MPColorButton_") >= 0)
		{
			//EventHandler.SendNetworkEvent(cmd);
	
			//link.RefreshSettingsDialog();
			
			Array<String> cmd;
            e.Name.Split(cmd, "_");
			if (cmd[1])
			{
				cvar logocolorcvar = cvar.getcvar("hxa_logocolor", players[e.Player]);
				if (logocolorcvar)
				{
					logocolorcvar.SetInt(cmd[1].ToInt());
					
					PlayerPawn Player = PlayerPawn(players[e.Player].mo);
					if (Player)
					{
						let HubInv = HA_AIHub(Player.FindInventory("HA_AIHub"));
						if (HubInv)
						{
							HubInv.ResetMultiplayerColor();
						}
					}
				}
			}
		}
		
		if (e.Name.IndexOf("InfoButton") >= 0)
		{
            Array<String> infoCmd;
            e.Name.Split(infoCmd, ":");
            if (infoCmd[1] ~== "Guard" || infoCmd[1] ~== "Follow")
            {
				int allyNum = infoCmd[2].ToInt();

				PlayerPawn Player = PlayerPawn(players[e.Player].mo);
				if (Player)
				{
					let HubInv = HA_AIHub(Player.FindInventory("HA_AIHub"));
					if (HubInv)
					{
						if (infoCmd[1] ~== "Guard")
							HubInv.GetAllyByIndex(allyNum).ForceGuard();
						else if (infoCmd[1] ~== "Follow")
							HubInv.GetAllyByIndex(allyNum).ForceFollow();
					}
				}
            }
		}

		// ----------------------------------------------------------------------------------------------
		// ----------------------------------------------------------------------------------------------
		if (e.Name ~== "AllyMenu_Spawn")
		{
			PlayerPawn Player = PlayerPawn(players[e.Player].mo);
			if (Player)
			{
				let AllySpawner = HA_AllySpawner(Player.FindInventory("HA_AllySpawner"));
				if (AllySpawner)
				{
					AllySpawner.SpawnAlly();
					StuckSoulsFix(Player);
				}
			}
		}

		if (e.Name ~== "AllyMenu_Increment")
		{
			PlayerPawn Player = PlayerPawn(players[e.Player].mo);
			if (Player)
			{
				let AllyIncrement = HA_AllySlot(Player.FindInventory("HA_AllySlot"));
				if (AllyIncrement)
				{
					AllyIncrement.TryIncrementing();
					StuckSoulsFix(Player);
				}
			}
		}

		if (e.Name ~== "AllyMenu_IncrementMaxSlot")
		{
			PlayerPawn Player = PlayerPawn(players[e.Player].mo);
			if (Player)
			{
				let AllyIncrement = HA_AllySlot(Player.FindInventory("HA_AllySlot"));
				if (AllyIncrement)
				{
					AllyIncrement.IncreaseMaxSlot();
					StuckSoulsFix(Player);
				}
			}
		}
		// ----------------------------------------------------------------------------------------------
		// ----------------------------------------------------------------------------------------------
		
		if (e.Name.IndexOf("AllyMenu_StopUIRefresh") >= 0)
		{
			Array<String> UICmd;
			e.Name.Split(UICmd, ":");
			int playerNum = UICmd[1].ToInt();
			
			PlayerPawn Player = PlayerPawn(players[playerNum].mo);
			if (Player)
			{
				let HubInv = HA_AIHub(Player.FindInventory("HA_AIHub"));
				if (HubInv && HubInv.MenuActive)
				{
					HubInv.SetForceRefresh(false);
				}
			}
		}
		
		if (e.Name ~== "AllyMenu_StartUIRefresh")
		{
			PlayerPawn Player = PlayerPawn(players[e.Player].mo);
			if (Player)
			{
				let HubInv = HA_AIHub(Player.FindInventory("HA_AIHub"));
				if (HubInv && HubInv.MenuActive)
				{
					HubInv.SetForceRefresh(true);
				}
			}
		}
		
		if (e.Name.IndexOf("AllyMenu_Active") >= 0)
		{
			Array<String> UICmd;
			e.Name.Split(UICmd, ":");
			int playerNum = UICmd[1].ToInt();
			bool set = UICmd[2].ToInt();
			
			PlayerPawn Player = PlayerPawn(players[playerNum].mo);
			if (Player)
			{
				let HubInv = HA_AIHub(Player.FindInventory("HA_AIHub"));
				if (HubInv)
				{
					HubInv.SetMenuActive(set);
				}
			}
		}
	}

	override void PlayerEntered (PlayerEvent e)
	{
		PlayerPawn n = PlayerPawn(players[e.PlayerNumber].mo);
		if (n)
		{
			// Make sure to only give Core items once per game session
			if (n.CountInv("HA_AIHub") <= 0)
			{
				n.A_GiveInventory("HA_AIHub", 1);
				
				// Usable Inventory items
				n.A_GiveInventory("HA_AllySpawner", 1);
				n.A_GiveInventory("HA_AllySlot", 1);
				
				let HubInv = HA_AIHub(players[e.PlayerNumber].mo.FindInventory("HA_AIHub"));
				if (HubInv)
				{
					HubInv.PlayerIndex = e.PlayerNumber;
					
					// Grab the logo color for multiplayer
					HubInv.ResetMultiplayerColor();
				}
			}
			else
			{
				let HubInv = HA_AIHub(players[e.PlayerNumber].mo.FindInventory("HA_AIHub"));
				if (HubInv)
				{
					// Better safe than sorry
					HubInv.SetMenuActive(false);
					HubInv.SetForceRefresh(false);
				}
			}
		}
	}

	override void WorldThingSpawned (Worldevent e)
	{
		// Store every Ally on the level to remove them later when the World is unloaded
		let SpawnedThing = e.Thing;
		if (SpawnedThing)
		{
			if (SpawnedThing is "HA_CoreAI")
			{
				Allies.Push(SpawnedThing);
			}
			
			// Challenge the Player by reducing the Bosses' Pain Chance and increasing Health
			if (SpawnedThing.bBOSS || IsHexenBoss(SpawnedThing))
			{
				if (!BossSpawn) 
					BossSpawn = true;
				
				Bosses.Push(SpawnedThing);
			}
			else if (SpawnedThing.bISMONSTER)
			{
				SpawnedThing.A_GiveInventory("HA_Uni", 1);
			}
		}
	}
	
	override void WorldUnloaded (WorldEvent e)
	{
		// Update information of Allies
		// Health, Active Weapon, etc...
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo)
			{
				let HubInv = HA_AIHub(Players[i].mo.FindInventory("HA_AIHub"));
				if (HubInv)
				{
					HubInv.UpdateAlly();
				}
			}
		}

		// Destroy all Allies, if we don't, Players will have duplicate amount of allies
		// Of course the dead ones should lay on the floor
		for (uint i = 0; i < Allies.size(); i++)
		{
			if (Allies[i] && !Allies[i].bKILLED)
			{
				Allies[i].Destroy();
			}
		}
	}

	override void WorldLoaded (WorldEvent e)
	{
		// This is where the allies will get "respawned" for the Players
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo)
			{
				let HubInv = HA_AIHub(Players[i].mo.FindInventory("HA_AIHub"));
				if (HubInv)
				{
					HubInv.RestoreAlly();
				}
			}
		}
	}

	static const string HexenBossList[] =
	{
		"korax",
		"heresiarch",
		"death wywern",
		"boss",
		"traductus",
		"menelkir",
		"zedek"
	};

	bool IsHexenBoss(actor Whom)
	{
		bool IsBoss = false;
		if (Whom && Whom.bISMONSTER)
		{
			string BossName = Whom.GetTag();
			BossName = BossName.MakeLower();
			
			for (uint i = 0; i < HexenBossList.Size(); i++)
			{
				if (BossName.IndexOf(HexenBossList[i]) >= 0)
				{
					IsBoss = true;
					break;
				}
			}
		}
		
		return IsBoss;
	}
	
	bool IsHereticBoss(actor Whom)
	{
		bool IsBoss = false;
		if (Whom && Whom.bISMONSTER)
		{
			// D'Sparil
			if (Whom is 'Sorcerer1' || Whom is 'Sorcerer2')
			{
				IsBoss = true;
			}
			else if (Whom is 'Ironlich')
			{
				IsBoss = true;
			}
		}
		
		return IsBoss;
	}

	override void WorldThingDied(WorldEvent e)
	{	
		if (e.Thing)
		{
			// Remove dead Ally from the database, never attempt to spawn dead allies
			// Also make sure we remove it from the correct Player
			if (e.Thing is 'HA_CoreAI')
			{
				let Ally = HA_CoreAI(e.Thing);
				if (Ally)
				{
					if (Ally.MyPlayer)
					{
						Ally.AllyObituary();
						
						let HubInv = HA_AIHub(Ally.MyPlayer.FindInventory("HA_AIHub"));
						if (HubInv)
						{
							HubInv.RemoveAlly(Ally);
							
							if (HubInv.MenuActive)
								HubInv.SetForceRefresh(true);
						}
					}
				}
			}

			if (e.Thing.bBOSS || IsHexenBoss(e.Thing) || IsHereticBoss(e.Thing))
			{
				let Blessed = HA_Blessed(e.Thing.FindInventory("HA_Blessed"));
				if (Blessed)
				{
					if (Blessed.LastAttacker is 'HA_CoreAI')
					{
						let Ally = HA_CoreAI(Blessed.LastAttacker);
						if (Ally)
						{
							string BossName = e.Thing.GetTag();
							string AllyName = Ally.AllyNameColorizedPlus();
							
							Console.Printf("%s \c[yellow]has been slain by \c[white]%s", BossName, AllyName);
						}
					}
				}
			}
			
			// Make sure we have a player in-game..
			/*
			actor Player = null;
			for (uint i = 0; i < MAXPLAYERS; i++)
			{
				if (Players[i].mo)
				{
					Player = Players[i].mo;
					break;
				}
			}
			*/

			if (!(e.Thing is "PlayerPawn") && 
				!e.Thing.bFRIENDLY && 
				!(e.Thing is "HA_CoreAI") && 
				e.Thing.bIsMonster)
			{
				if (!IsHexenBoss(e.Thing))
				{
					int x = random[xsoul](-30,30);
					int y = random[ysoul](-30,30);
					e.Thing.spawn("HA_Soul", e.thing.pos+(x,y,35));

					let pInv = HA_Uni(e.Thing.FindInventory("HA_Uni"));
					if (pInv)
					{
						let pAttacker = HA_CoreAI(pInv.LastAttacker);
						if (pAttacker)
						{
							pAttacker.Stats.Kills++;
						}
					}
				}
				else
				{
					// Bosses should spawn more Souls
					int MaxSouls = random[bssls](7,14);
					for (uint i = 0; i < MaxSouls; i++)
					{
						int x = random[xboss](-25,25);
						int y = random[yboss](-25,25);
						int z = random[zboss](1,45);
						e.Thing.spawn("HA_Soul", e.thing.pos+(x,y,z));
					}

					let pInv = HA_Blessed(e.Thing.FindInventory("HA_Blessed"));
					if (pInv)
					{
						let pAttacker = HA_CoreAI(pInv.LastAttacker);
						if (pAttacker)
						{
							pAttacker.Stats.Kills++;
						}
					}
				}
			}
		}
		
	}
}

extend class HexenAlliesCoreHandler
{
	bool isHexen() { return GameIWAD.isHexen; }
	bool isHeretic() { return GameIWAD.isHeretic; }
	
	ui bool isHexenUI() { return GameIWAD.isHexen; }
	ui bool isHereticUI() { return GameIWAD.isHeretic; }
	
	// Mod specific
	bool WrathOfCronos() { return GameMOD.isWoC; }
}