class HexenAlliesCoreHandler : EventHandler 
{
	Array<Actor> Allies;

	/*
	override void WorldTick()
	{
		PlayerPawn Player = PlayerPawn(players[e.Player].mo);
		if (Player)
		{

		}
	}
	*/

	/* No, I'm too lazy for this
	override void RenderOverlay(RenderEvent e)
	{
		HUDFont MainFont = HUDFont.Create("CONFONT");

		int OriginalWidth = StatusBar.HorizontalResolution;
		int OriginalHeight = StatusBar.VerticalResolution;

		StatusBar.BeginHUD(1.0, true);
		StatusBar.SetSize(StatusBar.RelTop, 640, 480);

		StatusBar.DrawString(MainFont, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",(0, 0), StatusBarCore.DI_SCREEN_CENTER);// | StatusBarCore.DI_FORCESCALE);

		StatusBar.BeginHUD(1.0, false);
		StatusBar.SetSize(StatusBar.RelTop, OriginalWidth, OriginalHeight);
	}
	*/

	const Key_One = 2;
	const Key_Two = 3;
			
	override void NetworkProcess(ConsoleEvent e)
    {
        if (e.Name ~== "ToggleAllyGuardOption")
        {
			//PlayerInfo player = players [e.Player];
			bool Pressing = e.Args[1];
			PlayerPawn Player = PlayerPawn(players[e.Player].mo);
			if (Player)
			{
				if (!Pressing)
				{
					bool PressedSpace = false;
					actor AllyToConf = null;
					let Hub = Player.FindInventory("HA_AIHub");
					if (Hub)
					{
						let VHub = HA_AIHub(Hub);
						if (VHub)
						{
							PressedSpace = VHub.OptionDecide;
							AllyToConf = VHub.OptAllyDecide;
						}
					}

					if (PressedSpace)
					{
						if (e.Args[0] == Key_One)
						{
							let HA_Ally = HA_CoreAI(AllyToConf);
							if (HA_Ally)
							{
								if (HA_Ally.CommandOrb)
									HA_Ally.CommandOrb.Destroy();

								HA_Ally.AllySay("Okay, I will stay here!");
								if (Hub)
								{
									let VHub = HA_AIHub(Hub);
									if (VHub)
									{
										VHub.OptionDecide = false;
										VHub.OptAllyDecide = null;
									}
								}

								if (Player.checkLocalView())
								{
									if (HA_Ally.MultiIndicator)
										HA_Ally.MultiIndicator.sprite = HA_Ally.MultiIndicator.GetSpriteIndex("HXNA");
								}
							}
						}
						else
						{
							Console.Printf("Pressed Two!");
						}
					}

				}
			}
        }
    }

	override bool InputProcess(InputEvent e)
    {
		/*
        int Key1, Key2;
        [Key1, Key2] = Bindings.GetKeysForCommand("1"); // [Ace] I am not sure about this.
        if (e.KeyScan == Key1 || e.KeyScan == Key2)
        {
            SendNetworkEvent("ToggleUseHold", e.Type == e.Type_KeyDown);
        }
		*/

		bool Deciding = false;
		let Player = players[consoleplayer].mo;
		if (Player)
		{
			let Hub = Player.FindInventory("HA_AIHub");
			if (Hub)
			{
				let VHub = HA_AIHub(Hub);
				if (VHub)
				{
					Deciding = VHub.OptionDecide;
				}
			}
		}

		if (e.KeyScan == Key_One || e.KeyScan == Key_Two)
		{
			SendNetworkEvent("ToggleAllyGuardOption", e.KeyScan, e.Type == e.Type_KeyDown); //e.Type == e.Type_KeyDown);
			return Deciding;
		}

        return false;
    }

	override void PlayerEntered (PlayerEvent e)
	{
		PlayerPawn n = PlayerPawn(players[e.PlayerNumber].mo);
		if (n)
		{
			// Core
			n.A_GiveInventory("HA_AIHub", 1);
			
			// Usable Inventory items
			n.A_GiveInventory("HA_AllySpawner", 1);
			n.A_GiveInventory("HA_AllySlot", 2);
		}
	}

	override void WorldThingSpawned (Worldevent e)
	{
		// Store every Ally on the level to remove them later when the World is unloaded
		let SpawnedThing = e.Thing;
		if (SpawnedThing && SpawnedThing is "HA_CoreAI")
		{
			Allies.Push(SpawnedThing);
		}
	}
	
	override void WorldUnloaded (WorldEvent e)
	{
		// Update information of Allies
		// Health, Active Weapon, etc...
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo)
			{
				let HubStuff = Players[i].mo.FindInventory("HA_AIHub");
				if (HubStuff)
				{
					let Inven = HA_AIHub(HubStuff);
					if (Inven)
					{
						Inven.UpdateAlly();
					}
				}
			}
		}

		// Destroy all Allies, if we don't, Players will have duplicate amount of allies
		// Of course the dead ones should lay on the floor
		for (uint i = 0; i < Allies.size(); i++)
		{
			if (Allies[i] && !Allies[i].bKILLED)
			{
				Allies[i].Destroy();
			}
		}
	}

	override void WorldLoaded (WorldEvent e)
	{
		// This is where the allies will get "respawned" for the Players
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo)
			{
				let HubStuff = Players[i].mo.FindInventory("HA_AIHub");
				if (HubStuff)
				{
					let Inven = HA_AIHub(HubStuff);
					if (Inven)
					{
						Inven.RestoreAlly();
					}
				}
			}
		}
	}

	override void WorldThingDied(WorldEvent e)
	{	
		if (e.Thing)
		{
			// Remove dead Ally from the database, never attempt to spawn dead allies
			// Also make sure we remove it from the correct Player
			if (e.Thing is 'HA_CoreAI')
			{
				let Ally = HA_CoreAI(e.Thing);
				if (Ally)
				{
					if (Ally.MyPlayer)
					{
						Ally.AllyObituary();
						
						let HubStuff = Ally.MyPlayer.FindInventory("HA_AIHub");
						if (HubStuff)
						{
							let Inven = HA_AIHub(HubStuff);
							if (Inven)
							{
								Inven.RemoveAlly(Ally);
							}
						}
					}
				}
			}

			// Make sure we have a player in-game..
			/*
			actor Player = null;
			for (uint i = 0; i < MAXPLAYERS; i++)
			{
				if (Players[i].mo)
				{
					Player = Players[i].mo;
					break;
				}
			}
			*/

			if (!(e.Thing is "PlayerPawn") && 
				!e.Thing.bFRIENDLY && 
				!(e.Thing is "HA_CoreAI") && 
				e.Thing.bIsMonster)
			{
				
				e.Thing.spawn("HA_Soul", e.thing.pos+(0,0,35));
			}
		}
		
	}
}