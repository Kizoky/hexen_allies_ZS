class HexenAlliesCoreHandler : EventHandler 
{
	Array<Actor> Allies;

	/*
	override void WorldTick()
	{
		//let player = players[consoleplayer].mo;
	}

	override void NetworkProcess (ConsoleEvent e)
	{
		//
	}
   
	override void PlayerEntered (PlayerEvent e)
	{
		//PlayerPawn n = PlayerPawn(players[e.PlayerNumber].mo);
	}
	*/

	override void WorldThingSpawned (Worldevent e)
	{
		let SpawnedThing = e.Thing;
		if (SpawnedThing && SpawnedThing is "HA_CoreAI")
		{
			Allies.Push(SpawnedThing);
		}
	}
	
	override void WorldUnloaded (WorldEvent e)
	{
		// Update information of Allies
		// Health, Active Weapon, etc...
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo)
			{
				let HubStuff = Players[i].mo.FindInventory("HA_AIHub");
				if (HubStuff)
				{
					let Inven = HA_AIHub(HubStuff);
					if (Inven)
					{
						Inven.UpdateAlly();
					}
				}
			}
		}

		// Destroy all Allies, if we don't, Players will have duplicate amount of allies
		// Of course the dead ones shouldn't be counted
		for (uint i = 0; i < Allies.size(); i++)
		{
			if (Allies[i] && !Allies[i].bKILLED)
			{
				Allies[i].Destroy();
			}
		}
	}

	override void WorldLoaded (WorldEvent e)
	{
		// This is where the allies will get "respawned" for the Players
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo)
			{
				let HubStuff = Players[i].mo.FindInventory("HA_AIHub");
				if (HubStuff)
				{
					let Inven = HA_AIHub(HubStuff);
					if (Inven)
					{
						Inven.RestoreAlly();
					}
				}
			}
		}
	}

	override void WorldThingDied(WorldEvent e)
	{	
		if (e.Thing)
		{
			// Remove dead Ally from the database, never attempt to spawn dead allies
			// Also make sure we remove it from the correct Player
			if (e.Thing is 'HA_CoreAI')
			{
				let Ally = HA_CoreAI(e.Thing);
				if (Ally)
				{
					if (Ally.MyPlayer)
					{
						let HubStuff = Ally.MyPlayer.FindInventory("HA_AIHub");
						if (HubStuff)
						{
							let Inven = HA_AIHub(HubStuff);
							if (Inven)
							{
								Inven.RemoveAlly(Ally);
							}
						}
					}
				}
			}

			/*
			let player = players[consoleplayer].mo;
			if (player && e.Thing && e.Thing != Player)
			{
				if (e.Thing.Target && (e.Thing.target is "PlayerPawn" || e.Thing.Target is "HA_CoreAI" || e.Thing.Target.bFRIENDLY))
				{
					//
				}
			}
			*/
		}
		
	}
}