// Corvus AI
class HA_Corvus : HA_CoreAI
{
	enum UnlockedWep
	{
		// Staff and Gauntlets are "one" here
		StaffGauntlets = 1,
		GoldWand,
		Crossbow,
		Blaster,
		SkullRod,
		PhoenixRod,
		Mace
	}
	
	override void SetActiveWeapon()
	{
		// Default (1)
		ActiveWeapon = "GoldWand";
		CanShootProj = true;
		
		switch (WeaponCapability)
		{
			case Crossbow: 		ActiveWeapon = "Crossbow";		break;
			case Blaster: 		ActiveWeapon = "Blaster";		break;
			case SkullRod: 		ActiveWeapon = "SkullRod";		break;
			case PhoenixRod: 	ActiveWeapon = "PhoenixRod";	break;
			case Mace: 			ActiveWeapon = "Mace";			break;
		}
	}
	
	static const string WeaponList[] =
	{
		"StaffGauntlets",
		"GoldWand",
		"Crossbow",
		"Blaster",
		"SkullRod",
		"PhoenixRod",
		"Mace"
	};
	
	override void HA_PostBeginPlay()
	{
		IsMelee = false;
		IsRanged = true;
		Pronoun = "He";
	}
	
	bool bPowered;
	bool bHasGauntlets;
	
	int TimeBeforeNextAttack;
	
	bool CORVUS_Wand()
	{
		int oldtime = TimeBeforeNextAttack;
		
		// These numbers aren't magic, they were copied from the weapon's code
		TimeBeforeNextAttack = level.time +
		3 +
		5 +
		3;
		
		double pitch = BulletSlope();
		
		if (!bPowered)
		{
			int damage = random[FireGoldWand](7, 14);
			double ang = angle;
			
			// We know for sure that Corvus has been firing non-stop
			if ((oldtime - level.time) == -1)
			{
				ang += Random2[FireGoldWand]() * (5.625 / 256);
		
				if (GetCVar ("vertspread") && !sv_novertspread)
				{
					pitch += Random2[FireGoldWand]() * (3.549 / 256);
				}
			}
			
			LineAttack(ang, PLAYERMISSILERANGE, pitch, damage, 'Hitscan', "GoldWandPuff1");
		}
		else
		{
			double vz = -GetDefaultByType("GoldWandFX2").Speed * clamp(tan(pitch), -5, 5);
			SpawnMissileAngle("GoldWandFX2", angle - (45. / 8), vz);
			SpawnMissileAngle("GoldWandFX2", angle + (45. / 8), vz);
			double ang = angle - (45. / 8);
			for(int i = 0; i < 5; i++)
			{
				int damage = random[FireGoldWand](1, 8);
				LineAttack (ang, PLAYERMISSILERANGE, pitch, damage, 'Hitscan', "GoldWandPuff2");
				ang += ((45. / 8) * 2) / 4;
			}
		}
		
		A_StartSound("weapons/wandhit", CHAN_WEAPON);
		
		return true;
	}
	
	bool CORVUS_Crossbow()
	{
		int oldtime = TimeBeforeNextAttack;
		
		if (!bPowered)
		{
			// These numbers aren't magic, they were copied from the weapon's code (slightly edited to avoid spamming)
			TimeBeforeNextAttack = level.time +
			6 +
			3 +
			4 +
			14;
			
			SpawnPlayerMissile ("CrossbowFX1");
			SpawnPlayerMissile ("CrossbowFX3", angle - 4.5);
			SpawnPlayerMissile ("CrossbowFX3", angle + 4.5);
			
			return true;
		}
		
		// These numbers aren't magic, they were copied from the weapon's code (slightly edited to avoid spamming)
		TimeBeforeNextAttack = level.time +
		5 +
		3 +
		2 +
		3 +
		2 +
		3 +
		3 +
		13;
		
		SpawnPlayerMissile ("CrossbowFX2");
		SpawnPlayerMissile ("CrossbowFX2", angle - 4.5);
		SpawnPlayerMissile ("CrossbowFX2", angle + 4.5);
		SpawnPlayerMissile ("CrossbowFX3", angle - 9.);
		SpawnPlayerMissile ("CrossbowFX3", angle + 9.);
		
		return true;
	}
	
	// Note: this is as fast as I can make them fire with this weapon, otherwise they'll be turrets
	bool CORVUS_Blaster()
	{
		int oldtime = TimeBeforeNextAttack;
		
		if (!bPowered)
		{
			// These numbers aren't magic, they were copied from the weapon's code
			TimeBeforeNextAttack = level.time +
			7;
			
			double pitch = BulletSlope();
			int damage = random[FireBlaster](1, 8) * 4;
			double ang = angle;
			// We know for sure that Corvus has been firing non-stop
			if ((oldtime - level.time) == -1)
			{
				ang += Random2[FireBlaster]() * (5.625 / 256);
	
				if (GetCVar ("vertspread") && !sv_novertspread)
				{
					pitch += Random2[FireBlaster]() * (3.549 / 256);
				}
			}
			LineAttack (ang, PLAYERMISSILERANGE, pitch, damage, 'Hitscan', "BlasterPuff");
			A_StartSound ("weapons/blastershoot", CHAN_WEAPON);
			
			return true;
		}
		
		// These numbers aren't magic, they were copied from the weapon's code
		TimeBeforeNextAttack = level.time +
		7;
		
		SpawnPlayerMissile("BlasterFX1");
	
		return true;
	}
	
	bool CORVUS_SkullRod()
	{
		int oldtime = TimeBeforeNextAttack;
		
		if (!bPowered)
		{
			TimeBeforeNextAttack = level.time +
			4;
			
			Actor mo = SpawnPlayerMissile ("HornRodFX1");
			// Randomize the first frame
			if (mo && random[FireSkullRod]() > 128)
			{
				mo.SetState (mo.CurState.NextState);
			}
			
			return true;
		}
		
		TimeBeforeNextAttack = level.time +
		24;
		
		FTranslatedLineTarget t;
		
		// Use MissileActor instead of the first return value from P_SpawnPlayerMissile 
		// because we need to give info to it, even if it exploded immediately.
		Actor mo, MissileActor;
		[mo, MissileActor] = SpawnPlayerMissile ("HornRodFX2", angle, pLineTarget: t);
		if (MissileActor != null)
		{
			if (t.linetarget && !t.unlinked)
			{
				MissileActor.tracer = t.linetarget;
			}
			MissileActor.A_StartSound ("weapons/hornrodpowshoot", CHAN_WEAPON);
		}
		
		return true;
	}
	
	bool CORVUS_PhoenixRod()
	{
		int oldtime = TimeBeforeNextAttack;
		
		if (!bPowered)
		{
			TimeBeforeNextAttack = level.time +
			25;
			
			SpawnPlayerMissile ("PhoenixFX1");
			Thrust(4, angle + 180);
			
			return true;
		}
		
		TimeBeforeNextAttack = level.time +
		12;
		
		double slope = -clamp(tan(pitch), -5, 5);
		double xo = Random2[FirePhoenixPL2]() / 128.;
		double yo = Random2[FirePhoenixPL2]() / 128.;
		Vector3 spawnpos = Vec3Offset(xo, yo, 26 + slope - Floorclip);

		slope += 0.1;
		Actor mo = Spawn("PhoenixFX2", spawnpos, ALLOW_REPLACE);
		if (mo != null)
		{
			// todo: Fix pitch towards target
			mo.target = self;
			mo.Angle = Angle;
			mo.VelFromAngle();
			mo.Vel.XY += Vel.XY;
			mo.Vel.Z = mo.Speed * slope;
			mo.CheckMissileSpawn (radius);
		}
		
		// We know for sure that Corvus has been firing non-stop
		//if ((oldtime - level.time) == -1)
		{
			A_StartSound("weapons/phoenixpowshoot", CHAN_WEAPON/*, CHANF_LOOPING*/);
		}
		
		return true;
	}
	
	bool CORVUS_Mace()
	{
		int oldtime = TimeBeforeNextAttack;
		
		if (!bPowered)
		{
			TimeBeforeNextAttack = level.time +
			4;
			
			if (random[MaceAtk]() < 28)
			{
				Actor ball = Spawn("MaceFX2", Pos + (0, 0, 28 - Floorclip), ALLOW_REPLACE);
				if (ball != null)
				{
					ball.Vel.Z = 2 - clamp(tan(pitch), -5, 5);
					ball.target = self;
					ball.angle = self.angle;
					ball.AddZ(ball.Vel.Z);
					ball.VelFromAngle();
					ball.Vel += Vel.xy / 2;
					ball.A_StartSound ("weapons/maceshoot", CHAN_BODY);
					ball.CheckMissileSpawn (radius);
				}
			}
			else
			{
				Actor ball = SpawnPlayerMissile("MaceFX1", angle + (random[MaceAtk](-4, 3) * (360. / 256)));
				if (ball)
				{
					ball.special1 = 16; // tics till dropoff
				}
			}
			
			return true;
		}
		
		TimeBeforeNextAttack = level.time +
		20;
		
		FTranslatedLineTarget t;

		Actor mo = SpawnPlayerMissile ("MaceFX4", angle, pLineTarget:t);
		if (mo)
		{
			mo.Vel.xy += Vel.xy;
			mo.Vel.Z = 2 - clamp(tan(pitch), -5, 5);
			if (t.linetarget && !t.unlinked)
			{
				mo.tracer = t.linetarget;
			}
		}
		
		A_StartSound ("weapons/maceshoot", CHAN_WEAPON);
		
		return true;
	}
	
	// Corvus can do melee damage, but the core AI needs some tinkering first..
	override void HA_MeleeShoot() {}
	
	override void HA_RangeShoot()
	{
		if (TimeBeforeNextAttack > level.time)
			return;
		
		angle = AngleTo(target, true);
		if (!CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0)) return;
		if (InStateSequence(CurState, ResolveState("Missile"))) return;
		
		if (ActiveWeapon ~== "GoldWand")
		{
			CORVUS_Wand();
		}
		
		if (ActiveWeapon ~== "Crossbow")
		{
			CORVUS_Crossbow();
		}
		
		if (ActiveWeapon ~== "Blaster")
		{
			CORVUS_Blaster();
		}
		
		if (ActiveWeapon ~== "SkullRod")
		{
			CORVUS_SkullRod();
		}
		
		// todo: Missiles should damage the Ally
		// todo: check line distance before firing, so we won't blow ourselves up
		if (ActiveWeapon ~== "PhoenixRod")
		{
			CORVUS_PhoenixRod();
		}
		
		if (ActiveWeapon ~== "Mace")
		{
			CORVUS_Mace();
		}
	}

	Default
	{
		Species "HexenAlly";
		PainSound "hxa_corvus/pain";
		DeathSound "hxa_corvus/death";
		
		// You can't jump in Heretic
		MaxStepHeight 24;
	}
	States
	{
	Spawn:
		PLAY AAA 4;
		Loop;
	See:
		PLAY A 0 A_AlertMonsters(184, AMF_TARGETEMITTER);
		PLAY ABCD 4 A_FollowerChase();
		Loop;
	Missile:
		Goto Melee;
	Melee:
		PLAY E 0 A_AlertMonsters(512, AMF_TARGETEMITTER);
		PLAY F 6 BRIGHT;
		PLAY E 12 A_AllyDodge(); //was 8
		Goto See;
	Pain:
		PLAY G 0 A_AlertMonsters(512, AMF_TARGETEMITTER);
		PLAY G 0 A_AllyDodge();
		PLAY G 4;
		PLAY G 4 A_Pain;
		Goto See;
	Death:
		PLAY H 6;
		PLAY I 6 A_Scream;
		PLAY JK 6;
		PLAY L 6 A_NoBlocking;
		PLAY MNO 6;
		PLAY P -1;
		Stop;	
	XDeath:
		PLAY Q 5 A_Scream;
		PLAY R 0 A_NoBlocking;
		PLAY R 5 A_SkullPop;
		PLAY STUVWX 5;
		PLAY Y -1;
		Stop;
	Ice:
		PLAY G 5 A_FreezeDeath;
		PLAY G 1 A_FreezeDeathChunks;
		Wait;
	Burn:
		FDTH A 5 BRIGHT A_StartSound("*burndeath");
		FDTH B 4 BRIGHT;
		FDTH C 5 BRIGHT;
		FDTH D 4 BRIGHT A_Scream;
		FDTH E 5 BRIGHT;
		FDTH F 4 BRIGHT;
		FDTH G 5 BRIGHT A_StartSound("*burndeath");
		FDTH H 4 BRIGHT;
		FDTH I 5 BRIGHT;
		FDTH J 4 BRIGHT;
		FDTH K 5 BRIGHT;
		FDTH L 4 BRIGHT;
		FDTH M 5 BRIGHT;
		FDTH N 4 BRIGHT;
		FDTH O 5 BRIGHT A_NoBlocking;
		FDTH P 4 BRIGHT;
		FDTH Q 5 BRIGHT;
		FDTH R 4 BRIGHT;
		ACLO E 35 A_CheckPlayerDone;
		Wait;
		ACLO E 8;
		Stop;
	}
}
