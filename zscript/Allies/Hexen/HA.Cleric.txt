// Cleric AI
class HA_Cleric : HA_CoreAI
{
	enum UnlockedWep
	{
		Mace = 1,
		Staff,
		Flame,
		Wraith
	}

	override void SetActiveWeapon()
	{
		switch (WeaponCapability)
		{
			// Default (1)
			ActiveWeapon = "Mace";
			CanShootProj = false;

			case Staff: 	ActiveWeapon = "Staff";		CanShootProj = true;	break;
			case Flame: 	ActiveWeapon = "Flame";		CanShootProj = true;	break;
			case Wraith: 	ActiveWeapon = "Wraith";	CanShootProj = true; 	break;
		}
	}

	static const string WeaponList[] =
	{
		"Mace",
		"Staff",
		"Flame",
		"Wraith"
	};

	override void HA_PostBeginPlay()
	{
		IsMelee = true;
		IsRanged = false;
		Pronoun = "He";
	}

	bool CLERIC_Mace()
	{
		bool result = false;
		
		FTranslatedLineTarget t;

		int damage = random[MaceAtk](25, 40);
		for (int i = 0; i < 16; i++)
		{
			for (int j = 1; j >= -1; j -= 2)
			{
				double ang = angle + j*i*(45. / 16);
				double slope = AimLineAttack(ang, 2 * DEFMELEERANGE, t, 0., ALF_CHECK3D);
				if (t.linetarget)
				{
					LineAttack(ang, 2 * DEFMELEERANGE, slope, damage, 'Melee', "HammerPuff", true, t);
					if (t.linetarget != null)
					{
						AdjustPlayerAngle(t);
						SetStateLabel("Melee");
						//vel.xy = (0,0);
						result = true;
					}
				}
			}
		}

		// didn't find any creatures, so try to strike any walls
		double slope = AimLineAttack (angle, DEFMELEERANGE, null, 0., ALF_CHECK3D);
		LineAttack (angle, DEFMELEERANGE, slope, damage, 'Melee', "HammerPuff");
		SetStateLabel("Melee");
		return result;
		//vel.xy = (0,0);
	}

	// todo: Lifesteal vs. missile mana consumption
	bool CLERIC_Staff()
	{
		bool result = false;
		
		FTranslatedLineTarget t;

		int damage = random[StaffCheck](20, 35);
		int max = 100;
		for (int i = 0; i < 3; i++)
		{
			for (int j = 1; j >= -1; j -= 2)
			{
				double ang = angle + j*i*(45. / 16);
				double slope = AimLineAttack(ang, 1.5 * DEFMELEERANGE, t, 0., ALF_CHECK3D);
				if (t.linetarget)
				{
					LineAttack(ang, 1.5 * DEFMELEERANGE, slope, damage, 'Melee', "CStaffPuff", false, t);
					if (t.linetarget != null)
					{
						angle = t.angleFromSource;
						if (t.linetarget.bIsMonster && (!t.linetarget.bDormant && !t.linetarget.bInvulnerable) &&
						t.linetarget != MyPlayer && !t.linetarget.bFRIENDLY && !(t.linetarget is "HA_CoreAI"))
						{
							int newLife = health + (damage >> 3);
							newLife = newLife > max ? max : newLife;
							if (newLife > health)
							{
								health = health = newLife;
							}
						}
					}
					SetStateLabel("Melee");
					//vel.xy = (0,0);
					result = true;
				}
			}
		}

		// didn't find any targets in meleerange, so set to throw out missile attack
		if (random[chanceshoot]() > 160 && 
			!(InStateSequence(CurState, ResolveState("Missile"))) && 
			CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0) )
		{
			Actor mo = SpawnPlayerMissile ("CStaffMissile", angle - 3.0);
			if (mo)
			{
				mo.WeaveIndexXY = 32;
			}
			mo = SpawnPlayerMissile ("CStaffMissile", angle + 3.0);
			if (mo)
			{
				mo.WeaveIndexXY = 0;
			}
			A_StartSound ("ClericCStaffFire", CHAN_BODY);

			//vel.xy = (0,0);
			SetStateLabel("Missile");
			result = true;
		}

		return result;
	}

	bool CLERIC_Flame()
	{
		if (random[chanceshoot]() > 215 && 
			!(InStateSequence(CurState, ResolveState("Missile"))) && 
			CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0) )
		{
			SpawnPlayerMissile ("CFlameMissile");
			A_StartSound ("ClericFlameFire", CHAN_BODY);

			//vel.xy = (0,0);
			SetStateLabel("Missile");
			return true;
		}

		return false;
	}

	bool CLERIC_Wraith()
	{
		if (random[chanceshoot]() > 215 && 
			!(InStateSequence(CurState, ResolveState("Missile"))) && 
			CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0) )
		{
			FTranslatedLineTarget t;

			Actor missile = SpawnPlayerMissile ("HolyMissile", angle, pLineTarget:t);
			if (missile != null && !t.unlinked)
			{
				missile.tracer = t.linetarget;
			}

			A_StartSound ("HolySymbolFire", CHAN_BODY);
			//vel.xy = (0,0);
			SetStateLabel("Missile");
			return true;
		}

		return false;
	}

	// We don't want them to repeatedly spam projectiles (more strict than Fighter)
	int TimeBeforeRangeAttack;
	int RangeAttacks;

	override void HA_MeleeShoot()
	{
		bool ranged = false;
		
		// Not within melee range
		if (!CheckMeleeRange())
		{
			// Can we shoot with projectiles though?
			if (!CanShootProj)
				return;
			
			if (TimeBeforeRangeAttack > level.time)
				return;
			
			if (RangeAttacks > 2)
			{
				TimeBeforeRangeAttack = level.time + (35 + (random[lgf](2,3)));
				RangeAttacks = 0;
				return;
			}
			
			ranged = true;
		}
		
		angle = AngleTo(target);

		// ================================= Mace of Contrition
		if (ActiveWeapon ~== "Mace")
		{
			if (CLERIC_Mace())
			{
				// none
			}
		}

		// ================================= Serpent Staff
		if (ActiveWeapon ~== "Staff")
		{
			if (CLERIC_Staff())
			{
				// Mana -= 3;
				
				if (ranged)
				{
					RangeAttacks++;
				}
			}
		}

		// ================================= Firestorm
		if (ActiveWeapon ~== "Flame")
		{
			// Switch move AI
			isRanged = true;
			isMelee = false;
			
			if (CLERIC_Flame())
			{
				// Mana -= 5;
				
				RangeAttacks++;
			}
		}

		// ================================= Wraithverge
		if (ActiveWeapon ~== "Wraith")
		{
			// Switch move AI
			isRanged = true;
			isMelee = false;
			
			if (CLERIC_Wraith())
			{
				// Mana -= 15;
				
				RangeAttacks++;
			}
		}
	}

	Default
	{
		Species "HexenAlly";
		PainSound "PlayerClericPain";
		DeathSound "PlayerClericNormalDeath";
	}
	States
	{
	Spawn:
		CLER AAA 4;
		Loop;
	See:
		CLER A 0 A_AlertMonsters(184, AMF_TARGETEMITTER);
		CLER ABCD 4 A_FollowerChase();
		Loop;
	Missile:
		Goto Melee;
	Melee:
		CLER E 0 A_AlertMonsters(512, AMF_TARGETEMITTER);
		CLER EF 4 A_AllyDodge();
		CLER G 17 A_AllyDodge(); //was 8
		CLER FE 2 A_AllyDodge();
		Goto See;
	Pain:
		CLER H 0 A_AlertMonsters(512, AMF_TARGETEMITTER);
		CLER H 0 A_AllyDodge();
		CLER H 4;
		CLER H 4 A_Pain;
		Goto See;
	Death:
		CLER I 6;
		CLER J 6 A_Scream;
		CLER KL 6;
		CLER M 6 A_NoBlocking;
		CLER NOP 6;
		CLER Q -1;
		Stop;		
	XDeath:
		CLER R 5 A_Scream;
		CLER S 5;
		CLER T 5 A_NoBlocking;
		CLER UVWXYZ 5;
		CLER [ -1;
		Stop;
	Ice:
		CLER \ 5 A_FreezeDeath;
		CLER \ 1 A_FreezeDeathChunks;
		Wait;
	Burn:
		FDTH C 5 BRIGHT A_StartSound("*burndeath");
		FDTH D 4 BRIGHT;
		FDTH G 5 BRIGHT;
		FDTH H 4 BRIGHT A_Scream;
		FDTH I 5 BRIGHT;
		FDTH J 4 BRIGHT;
		FDTH K 5 BRIGHT;
		FDTH L 4 BRIGHT;
		FDTH M 5 BRIGHT;
		FDTH N 4 BRIGHT;
		FDTH O 5 BRIGHT;
		FDTH P 4 BRIGHT;
		FDTH Q 5 BRIGHT;
		FDTH R 4 BRIGHT;
		FDTH S 5 BRIGHT A_NoBlocking;
		FDTH T 4 BRIGHT;
		FDTH U 5 BRIGHT;
		FDTH V 4 BRIGHT;
		ACLO E 35 A_CheckPlayerDone;
		Wait;
		ACLO E 8;
		Stop;	
	
	}
}
