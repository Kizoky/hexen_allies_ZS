// Fighter AI
class HA_Fighter : HA_CoreAI
{
	const AXERANGE = (2.25 * DEFMELEERANGE);
	const HAMMER_RANGE = 1.5 * DEFMELEERANGE;

	enum UnlockedWep
	{
		Fist = 1,
		Axe,
		Hammer,
		Quietus
	}

	override void SetActiveWeapon()
	{
		switch (WeaponCapability)
		{
			// Default (1)
			ActiveWeapon = "Fist";
			CanShootProj = false;

			case Axe: 		ActiveWeapon = "Axe"; 		CanShootProj = false;	break;
			case Hammer: 	ActiveWeapon = "Hammer"; 	CanShootProj = true;	break;
			case Quietus: 	ActiveWeapon = "Quietus"; 	CanShootProj = true; 	break;
		}
	}

	static const string WeaponList[] =
	{
		"Fist",
		"Axe",
		"Hammer",
		"Quietus"
	};

	override void HA_PostBeginPlay()
	{
		ActiveWeapon = "Fist";
		IsMelee = true;
		IsRanged = false;
		Pronoun = "He";
	}

	override void HA_MeleeShoot()
	{
		if (!IsMelee) return;
		if (!CheckMeleeRange() && !IsRanged) return;
		angle = AngleTo(target);

		// ================================= Fist
		if (ActiveWeapon ~== "Fist")
		{
			int damage = random[FighterAtk](40, 55);
			FTranslatedLineTarget t;

			double slope = AimLineAttack (angle, 2*DEFMELEERANGE, t, 0, ALF_CHECK3D);
			if (t.linetarget != null)
			{
				Actor puff = LineAttack (angle, 2*DEFMELEERANGE, slope, damage, "FriendlyFire", "PunchPuff", LAF_TARGETISSOURCE, t);
				if (t.linetarget != null && t.linetarget != MyPlayer)
				{
					if (!t.linetarget.bDontThrust)
						t.linetarget.Thrust(2, t.attackAngleFromSource);

					//vel.xy = (0,0);
					SetStateLabel("Missile");
				}
			}
		}

		// ================================= Timon's Axe
		if (ActiveWeapon ~== "Axe")
		{	
			FTranslatedLineTarget t;

			int damage = random[AxeAtk](40, 55);
			damage += random[AxeAtk](0, 7);
			int power = 0;
			class<Actor> pufftype;

			bool Glow = random[glw](0,1);
			if (Glow)
			{
				damage <<= 1;
				power = 6;
				pufftype = "AxePuffGlow";
			}
			else
			{
				pufftype = "AxePuff";
			}

			for (int i = 0; i < 16; i++)
			{
				for (int j = 1; j >= -1; j -= 2)
				{
					double ang = angle + j*i*(45. / 16);
					double slope = AimLineAttack(ang, AXERANGE, t, 0., ALF_CHECK3D);
					if (t.linetarget)
					{
						LineAttack(ang, AXERANGE, slope, damage, 'Melee', pufftype, true, t);
						if (t.linetarget != null)
						{
							if (t.linetarget.bIsMonster || t.linetarget.player)
							{
								t.linetarget.Thrust(power, t.attackAngleFromSource);
							}
							AdjustPlayerAngle(t);

							//vel.xy = (0,0);
							SetStateLabel("Missile");
							return;
						}
					}
				}
			}

			// didn't find any creatures, so try to strike any walls
			double slope = AimLineAttack (angle, DEFMELEERANGE, null, 0., ALF_CHECK3D);
			LineAttack (angle, DEFMELEERANGE, slope, damage, 'Melee', pufftype, true);
			//vel.xy = (0,0);
			SetStateLabel("Missile");
		}

		// ================================= Hammer of Retribution
		if (ActiveWeapon ~== "Hammer")
		{	
			FTranslatedLineTarget t;

			int damage = random[HammerAtk](60, 123);
			for (int i = 0; i < 16; i++)
			{
				for (int j = 1; j >= -1; j -= 2)
				{
					double ang = angle + j*i*(45. / 32);
					double slope = AimLineAttack(ang, HAMMER_RANGE, t, 0., ALF_CHECK3D);
					if (t.linetarget != null)
					{
						LineAttack(ang, HAMMER_RANGE, slope, damage, 'Melee', "HammerPuff", true, t);
						if (t.linetarget != null)
						{
							AdjustPlayerAngle(t);
							if (t.linetarget.bIsMonster || t.linetarget.player)
							{
								t.linetarget.Thrust(10, t.attackAngleFromSource);
							}
							// Don't throw a hammer
							//vel.xy = (0,0);
							SetStateLabel("Missile");
							return;
						}
					}
				}
			}

			// didn't find any targets in meleerange, so set to throw out a hammer
			if (random[chanceshoot]() > 225 && 
				!(InStateSequence(CurState, ResolveState("Missile"))) && 
				CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0) )
			{
				double slope = AimLineAttack (angle, HAMMER_RANGE, null, 0., ALF_CHECK3D);
				A_SpawnProjectile("HammerMissile", 55);
				//vel.xy = (0,0);
				SetStateLabel("Missile");
			}
			// Don't spawn a hammer if the player doesn't have enough mana
		}

		// ================================= Quietus
		if (ActiveWeapon ~== "Quietus")
		{
			if (random[chanceshoot]() > 225 && 
				!(InStateSequence(CurState, ResolveState("Missile"))) && 
				CheckLOF(0, 0, 0, 0, 0, 0, 0, AAPTR_TARGET, 0) )
			{
				SpawnPlayerMissile ("FSwordMissile", Angle + (45./4),0, 0, -10);
				SpawnPlayerMissile ("FSwordMissile", Angle + (45./8),0, 0,  -5);
				SpawnPlayerMissile ("FSwordMissile", Angle          ,0, 0,   0);
				SpawnPlayerMissile ("FSwordMissile", Angle - (45./8),0, 0,   5);
				SpawnPlayerMissile ("FSwordMissile", Angle - (45./4),0, 0,  10);
				A_StartSound ("FighterSwordFire", CHAN_BODY);
				//vel.xy = (0,0);
				SetStateLabel("Missile");
			}
		}

	}

	Default
	{
		Species "HexenAlly";
		PainSound "PlayerFighterPain";
		DeathSound "PlayerFighterNormalDeath";
	}
	States
	{
	Spawn:
		PLAY AAA 4;
		Loop;
	See:
		PLAY A 0 A_AlertMonsters(184, AMF_TARGETEMITTER);
		PLAY ABCD 4 A_FollowerChase();
		Loop;
	Missile:
		Goto Melee;
	Melee:
		PLAY E 0 A_AlertMonsters(512, AMF_TARGETEMITTER);
		PLAY E 4 A_AllyDodge();
		PLAY F 17 A_AllyDodge(); //was 8
		PLAY E 2 A_AllyDodge();
		Goto See;
	Pain:
		PLAY G 0 A_AlertMonsters(512, AMF_TARGETEMITTER);
		PLAY G 0 A_AllyDodge();
		PLAY G 4;
		PLAY G 4 A_Pain;
		Goto See;
	Death:
		PLAY H 6;
		PLAY I 6 A_Scream;
		PLAY JK 6;
		PLAY L 6 A_NoBlocking;
		PLAY M 6;
		PLAY N -1;
		Stop;		
	XDeath:
		PLAY O 5 A_Scream;
		PLAY P 5 A_SkullPop("BloodyFighterSkull");
		PLAY R 5 A_NoBlocking;
		PLAY STUV 5;
		PLAY W -1;
		Stop;
	Ice:
		PLAY X 5 A_FreezeDeath;
		PLAY X 1 A_FreezeDeathChunks;
		Wait;
	Burn:
		FDTH A 5 BRIGHT A_StartSound("*burndeath");
		FDTH B 4 BRIGHT;
		FDTH G 5 BRIGHT;
		FDTH H 4 BRIGHT A_Scream;
		FDTH I 5 BRIGHT;
		FDTH J 4 BRIGHT;
		FDTH K 5 BRIGHT;
		FDTH L 4 BRIGHT;
		FDTH M 5 BRIGHT;
		FDTH N 4 BRIGHT;
		FDTH O 5 BRIGHT;
		FDTH P 4 BRIGHT;
		FDTH Q 5 BRIGHT;
		FDTH R 4 BRIGHT;
		FDTH S 5 BRIGHT A_NoBlocking;
		FDTH T 4 BRIGHT;
		FDTH U 5 BRIGHT;
		FDTH V 4 BRIGHT;
		ACLO E 35 A_CheckPlayerDone;
		Wait;
		ACLO E 8;
		Stop;	
	
	}
}
