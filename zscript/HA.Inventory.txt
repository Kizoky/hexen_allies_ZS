class AllyInfo play
{
	int Health;
	string Type; 		// The Class type of the Ally (Fighter, Cleric, Mage ...)
	string Color; 		// The translation color of the Ally
	string Weapon; 		// Currently Active Weapon (todo later: probably not needed)
	string ColorChat; 	// Needed for the Ally's name coloring in chat
	actor pAlly; 		// The Pointer that holds the Ally
}

// todo: Maybe we could squash these Inventory items as one? Atleast the most important ones

// Stores information about the Player's allies, then spawns them into the level accordingly
class HA_AIHub : Inventory
{
	// The total amount of active/spawned Allies
	int TotalNum;

	Array<AllyInfo> AIinfo;

	// Can Allies use higher tier weapons according to Weapon slot? (Default is 1)
	int UnlockWeaponry;

	bool OptionDecide;
	actor OptAllyDecide;

	// Compatibility with other mods
	// Wrath of Cronos
	bool WoCMod;

	// Debug
	int developer;

	override void Tick()
	{
		Super.Tick();

		actor MyPlayer = owner;
		if (MyPlayer)
		{
			// Check every 2 seconds the Player's weapon to unlock the arsenal of all Allies
			if (level.time % (35 * 2) == 0)
			{
				let wepP = MyPlayer.player.ReadyWeapon;
				if (wepP)
				{
					class<weapon> weapon = MyPlayer.player.ReadyWeapon.GetClassName();

					bool _; int slot;
					[_, slot] = MyPlayer.player.weapons.locateWeapon(weapon);

					if (slot > UnlockWeaponry)
					{
						int differ = slot - UnlockWeaponry;

						// Player might just never equip the previous slot weapon, so big brain time
						UnlockWeaponry += slot - UnlockWeaponry;

						if (differ == 1)
							PrintTip("Slots", slot);
						else 
							PrintTip("Slots", slot, differ);

						// Unlock weapon(s) for active allies on the level
						for (uint i = 0; i < AIinfo.size(); i++)
						{
							if (AIinfo[i].pAlly)
							{
								let Ally = HA_CoreAI(AIinfo[i].pAlly);
								if (Ally)
								{
									Ally.WeaponCapability = UnlockWeaponry;
								}
							}
						}

					}
				}
			}
		}
	}

	void PrintTip(string Tip, int param1 = 0, double param2 = -1)
	{
		actor MyPlayer = owner;
		if (Tip ~== "Slots")
		{
			if (MyPlayer)
			{
				if (MyPlayer.checkLocalView())
				{
					string Display = "n/a";
					string number = "n/a";

					if (param2 < 0)
					{
						switch (param1)
						{
							case 1: number = "First"; break;
							case 2: number = "Second"; break;
							case 3: number = "Third"; break;
						}

						if (param1 != 4)
							Display = string.Format("\c*Your allies are now able to use their %s weapon!", number);
						else
							Display = string.Format("\c*Your allies are now able to use all weapons!");

						Console.MidPrint(NULL, Display);
					}
					else
					{
						// For some reason... the player skipped a weapon slot, we don't know why, and we'll never know why

						// Slot 3, but the difference is 2 (Player equipped Slot 1 -> Slot 3)
						if (param1 == 3 && param2 == 2)
						{
							Display = string.Format("\c*Your allies are now able to use their Second and Third weapons!");
						}

						// We don't care, it's Slot 4
						if (param1 == 4)
						{
							Display = string.Format("\c*Your allies are now able to use all weapons!");
						}

						Console.MidPrint(NULL, Display);
					}
				}
			}
		}
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
    {
        if (owner && source is "HA_CoreAI")
		{
			newdamage = 0;
		}
    }

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		TotalNum = 0;
		UnlockWeaponry = 1;

		cvar developercvar = cvar.findcvar('developer');
		int developerc = (developercvar != null && developercvar.GetInt ());
		if (developerc == 2)
			developer = true;
	}

	// Add an Ally for future restoration
	// Preserves everything, with the exception of Actor array, which needs to be refilled
	// after a new level (See RestoreAlly below)
	void AddAlly(actor Ally, string Type, string Color, string ChatColor, int Health = 100, string Weapon = "null")
	{
		TotalNum++;
		//Console.Printf("TotalNum: %d", TotalNum);
		let AA = HA_CoreAI(Ally);
		if (AA)
		{
			AA.SpawnSlot = TotalNum;
		}

		let NewAlly = new("AllyInfo");
		NewAlly.pAlly = Ally;
		NewAlly.Type = Type;
		NewAlly.Color = Color;
		NewAlly.ColorChat = ChatColor;
		NewAlly.Health = Health;
		NewAlly.Weapon = Weapon;

		AIinfo.Push(NewAlly);
	}

	// Update information on the allies before destroying them, and changing onto the next level
	// i.e. They should not have more Health if they were hurt previously
	// Look inside HA.EventHandler.txt, WorldUnloaded function
	void UpdateAlly()
	{
		for (uint i = 0; i < AIinfo.size(); i++)
		{
			if (AIinfo[i].pAlly)
			{
				let Ally = HA_CoreAI(AIinfo[i].pAlly);
				if (Ally)
				{
					AIinfo[i].Health = Ally.Health;
					AIinfo[i].Weapon = Ally.ActiveWeapon;
				}
			}
		}
	}

	// Remove an Ally from restoration
	// Mainly because they died
	// Look also in HA.EventHandler how actors are getting removed on each level reset
	void RemoveAlly(actor Whom)
	{	
		for (uint i = 0; i < AIinfo.size(); i++)
		{
			if (AIinfo[i].pAlly && Whom && AIinfo[i].pAlly == Whom)
			{
				AIinfo.Delete(i);
				TotalNum--;
				break;
			}
		}
	}

	void RestoreAlly()
	{
		for (uint i = 0; i < AIinfo.Size(); ++i)
		{
			class<Actor> AllySpawn = null;

			if (AIinfo[i].Type ~== "Fighter") AllySpawn = "HA_Fighter";
			if (AIinfo[i].Type ~== "Cleric") AllySpawn = "HA_Cleric";
			if (AIinfo[i].Type ~== "Mage") AllySpawn = "HA_Mage";

			if (!AllySpawn)
			{
				Console.Printf("Hexen Allies: Unknown Ally Type found! (%s)", AIinfo[i].Type);
				return;
			}

			actor HAlly = HA_CoreAI(spawn(AllySpawn, owner.pos, ALLOW_REPLACE));
			if (HAlly)
			{
				if (AIinfo[i].Color != "default")
					HAlly.A_SetTranslation(AIinfo[i].Color);
				
				HAlly.A_SetHealth(AIinfo[i].Health);
				HAlly.MyPlayer = owner;
				HAlly.HexenType = AIinfo[i].Type;
				HAlly.ChatColor = AIinfo[i].ColorChat;
				HAlly.WeaponCapability = UnlockWeaponry;
				HAlly.SpawnSlot = i+1;
				HAlly.SetStateLabel("See");

				// Set the name properly for the Ally
				HAlly.SetTag(HAlly.AllyName());

				if (WoCMod)
				{
					// No experience for now, will have to save that too into an array
					HAlly.ACS_NamedExecuteAlways("WOC Monster Init", 0, 256, 0);
					HAlly.WoC = true;
					
					string WoCItem1 = "CurrentMaxHealth";
					string WoCItem2 = "Level";
					class<Inventory> CurrentMaxHealth = WoCItem1;
					class<Inventory> Level = WoCItem2;
					
					// Fix bug with the HUD
					HAlly.A_SetInventory(CurrentMaxHealth, 100);
					HAlly.A_SetInventory(Level, 1);
				}

				// Actor pointers will become garbage after a level change, so we kinda "reset" them
				AIinfo[i].pAlly = HAlly;
			}
		}
	}

	// If one Ally has been spawned already, check for the other class that's not a duplicate
	// and isn't the Player's doppelganger
	int NonDuplicateClass(int ActiveClass)
	{
		Array<int> NonDuplicateClasses;

		if (TotalNum != 0)
		{
			for (uint i = 0; i < AIinfo.size(); i++)
			{
				if (AIinfo[i].pAlly)
				{
					let Ally = HA_CoreAI(AIinfo[i].pAlly);
					if (Ally)
					{
						for (uint j = 0; j < HA_AllySpawner.HexenAllyList.Size(); j++)
						{
							if (!(Ally.HexenType ~== HA_AllySpawner.HexenAllyList[j]))
							{
								if (j != ActiveClass)
								{
									NonDuplicateClasses.Push(j);
								}
							}
						}
					}
				}
			}
		}
		else
		{
			Console.Printf("Hexen Allies: Warning, tried to use NonDuplicateClass without a single Ally spawned (TotalNum variable)");
			Console.Printf("Hexen Allies: This causes an array out of bounds.");
		}

		int rng = random[cls](0, NonDuplicateClasses.Size()-1);
		return NonDuplicateClasses[rng];
	}

	Default
	{
		+INVENTORY.UNDROPPABLE;
       	+INVENTORY.UNTOSSABLE;
       	+INVENTORY.PERSISTENTPOWER;
       	inventory.maxamount 1;
	}
}

class HA_AllySpawner : CustomInventory
{
	static const string HexenListName[] =
	{ // Uses actual PlayerClass names
		"FighterPlayer",
		"ClericPlayer",
		"MagePlayer"
	};

	static const class<actor> HexenSpawnList[] =
	{
		"HA_Fighter",
		"HA_Cleric",
		"HA_Mage"
	};

	static const string HexenColors[] =
	{
		"Green",
		"Red",
		"Blue",
		"Silver",
		"Yellow"
	};

	enum eHexenColors
	{
		HA_GREEN,
		HA_RED,
		HA_BLUE,
		HA_SILVER,
		HA_YELLOW,
	}

	static const string HexenAllyList[] =
	{
		"Fighter",
		"Cleric",
		"Mage"
	};

	private void SpawnAlly()
	{		
		if (owner)
		{
			actor MyPlayer = owner;
			
			if (!MyPlayer) return;

			//Console.Printf("Souls: %d | Spawner: %d", MyPlayer.CountInv("HA_Soul"), MyPlayer.CountInv("HA_AllySpawner"));

			// Check if we have enough slots to spawn a new Ally
			// Also if we already have Allies spawned
			let HubInv = HA_AIHub(MyPlayer.FindInventory("HA_AIHub"));
			if (HubInv)
			{
				if (HubInv.TotalNum >= MyPlayer.CountInv("HA_AllySlot"))
				{
					string Req = String.Format("\c[red]You can only have %d Allies spawned!\n\c[white]Upgrade your Slot!", MyPlayer.CountInv("HA_AllySlot"));
					let AllySlot = MyPlayer.FindInventory("HA_AllySlot");
					if (AllySlot)
					{
						if (MyPlayer.CountInv("HA_AllySlot") == AllySlot.MaxAmount)
						{
							Req = String.Format("\c[red]You can no longer spawn any Ally\nas you have hit the maximum amount possible!");
						}
					}

					if (MyPlayer.checkLocalView())
					{
						Console.MidPrint(NULL, Req);
					}
					return;
				}
			}

			int CostToSpawn = 5;
			if (MyPlayer.CountInv("HA_Soul") < CostToSpawn)
			{
				int Req = CostToSpawn - MyPlayer.CountInv("HA_Soul");
				string Requ = String.Format("\c[red]Not enough souls to spawn Ally!\n\c[silver]You need %d more", Req);
				if (MyPlayer.checkLocalView())
				{
					Console.MidPrint(NULL, Requ);
				}
				MyPlayer.A_StartSound("DoorLocked", CHAN_BODY);
				return;
			}

			MyPlayer.A_TakeInventory("HA_Soul", CostToSpawn);
			int Souls = MyPlayer.CountInv("HA_Soul");
			MyPlayer.A_SetInventory("HA_AllySpawner", Souls);

			//if (MyPlayer.CountInv("HA_Soul") == 0)
				//MyPlayer.A_GiveInventory("HA_Soul", 1);

			string PlayerClass = MyPlayer.GetClassName();

			//------------ WoC support

			// Check for an item that is 100% always in the mod, and not in any other mod
			bool isWoCLoaded = false;
			string WoCItem = "WoC_Stat";
			class<Actor> woc = WoCItem;
			if (woc)
			{
				Console.Printf("\c[red]Hexen Allies: \c[yellow]Wrath of Cronos \c[red]detected!");
				isWoCLoaded = true;
				
				// Make the Hub inventory item aware of WoC
				if (HubInv)
				{
					HubInv.WoCMod = true;
				}
			}

			//------------------------------ WoC support
			if (isWoCLoaded)
			{
				if (PlayerClass ~== "NewFighterPlayer")
					PlayerClass = "FighterPlayer";
				if (PlayerClass ~== "NewClericPlayer")
					PlayerClass = "ClericPlayer";
				if (PlayerClass ~== "NewMagePlayer")
					PlayerClass = "MagePlayer";
				// todo: #1 WoC: Add Ally version of Hunter, Necromancer, and Assassin
				if (PlayerClass ~== "NewHunterPlayer" ||
					PlayerClass ~== "NewNecromancerPlayer" ||
					PlayerClass ~== "NewAssassinPlayer")
					{
						Console.Printf("\c[red]Hexen Allies: \c[yellow]The Playerclass you play as doesn't have an Ally version!");
						int randomclass = random[woc](0, HexenListName.Size()-1);
						PlayerClass = HexenListName[randomclass];
					}
			}
			//------------------------------

			int TotalAlliesSpawned = 0;
			int Chosen = 0;

			if (HubInv)
			{
				TotalAlliesSpawned = HubInv.TotalNum;
			}

			if (TotalAlliesSpawned <= 2)
			{
				int ActiveClass = 0;
				Array<int> AvailableClass;
				for (int i = 0; i < HexenListName.Size(); i++)
				{
					if (PlayerClass ~== HexenListName[i])
					{
						ActiveClass = i;
					}

					if (!(PlayerClass ~== HexenListName[i]))
					{
						AvailableClass.Push(i);
					}
				}

				// Randomize the Ally's class on spawn
				int chsn = random[choose](0, AvailableClass.Size()-1);
				Chosen = AvailableClass[chsn];

				// The idea here is that until the Player has 2 allies do not spawn an Ally class identical to the Player's
				if (HubInv && TotalAlliesSpawned > 0)
				{
					Chosen = HubInv.NonDuplicateClass(ActiveClass);
				}

				// We can just assume the Third Ally's class will always be the same like the Player's
				if (TotalAlliesSpawned == 2)
				{
					Chosen = ActiveClass;
				}
			}
			else
			{
				// todo: Should we leave this as totally random, or introduce a ruling?
				Chosen = random[tas](0, HexenSpawnList.Size()-1);
			}

			int UnlockableWeapons = 1;
			if (HubInv)
			{
				UnlockableWeapons = HubInv.UnlockWeaponry;
			}

			actor SpawnedAI = HA_CoreAI(spawn(HexenSpawnList[Chosen], MyPlayer.pos, ALLOW_REPLACE));
			if (SpawnedAI)
			{
				SpawnedAI.MyPlayer = MyPlayer;
				SpawnedAI.HexenType = HexenAllyList[Chosen];
				SpawnedAI.WeaponCapability = UnlockableWeapons;
				SpawnedAI.SetStateLabel("See");
				// Say hooray for Color randomization!
				int rndColor = random[clr](0, HexenColors.Size()-1);
				string AIcolor = "n/a";
				if (SpawnedAI.HexenType ~== "Cleric" || 
					SpawnedAI.HexenType ~== "Mage")
				{
					AIcolor = String.Format("CM%s", HexenColors[rndColor]);
					// Cleric and Mage is blue by default, so we don't need to set it
					if (rndColor != HA_BLUE)
						SpawnedAI.A_SetTranslation(AIcolor);
					else AIcolor = "default";
				}
				else if (SpawnedAI.HexenType ~== "Fighter")
				{
					AIcolor = String.Format("F%s", HexenColors[rndColor]);
					// Fighter is Silver by default
					if (rndColor != HA_SILVER)
						SpawnedAI.A_SetTranslation(AIcolor);
					else AIcolor = "default";
				}

				// Needed for chat coloring
				SpawnedAI.ChatColor = HexenColors[rndColor];

				// Execute function from Player's inventory
				if (HubInv)
				{
					// Store Ally information
					HubInv.AddAlly(SpawnedAI, SpawnedAI.HexenType, AIcolor, SpawnedAI.ChatColor);
				}

				SpawnedAI.AllySay("Ready for action!");
				SpawnedAI.Following = true;

				SpawnedAI.SetTag(SpawnedAI.AllyName());

				// Settings for AI after WoC is detected
				if (isWoCLoaded)
				{
					// No experience for now, will have to save that too into an array
					SpawnedAI.ACS_NamedExecuteAlways("WOC Monster Init", 0, 256, 0);
					SpawnedAI.WoC = true;
					
					string WoCItem1 = "CurrentMaxHealth";
					string WoCItem2 = "Level";
					class<Inventory> CurrentMaxHealth = WoCItem1;
					class<Inventory> Level = WoCItem2;
					
					// Force set this for now
					SpawnedAI.A_SetInventory(CurrentMaxHealth, 100);
					SpawnedAI.A_SetInventory(Level, 1);
				}
			}
		}
	}

	Default
	{
		+COUNTITEM
		+FLOATBOB
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE;
       	+INVENTORY.UNTOSSABLE;
       	+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		Inventory.PickupFlash "PickupFlash";
		+INVENTORY.FANCYPICKUPSOUND
		Inventory.Icon "HASPAWN";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "Picked up an Ally Spawner. Wait... that's illegal";
		Inventory.Amount 1;
		Inventory.MaxAmount 999;
		Tag "Ally Spawner";
	}
	States
	{
	Spawn:
		EGGC ABCB 6;
		Loop;
	Use:
		TNT1 A 0 { invoker.SpawnAlly(); }
		Fail;
	}
}

class HA_AllySlot : CustomInventory
{
	private void TryIncrementing()
	{		
		if (owner)
		{
			actor MyPlayer = owner;
			int Cost = 21;

			if (MyPlayer.CountInv("HA_Soul") < Cost)
			{
				int Req = Cost - MyPlayer.CountInv("HA_Soul");
				string Requ = String.Format("\c[red]Not enough souls to add a slot!\n\c[silver]You need %d more", Req);
				if (MyPlayer.checkLocalView())
				{
					Console.MidPrint(NULL, Requ);
				}
				MyPlayer.A_StartSound("DoorLocked", CHAN_BODY);
				return;
			}
			else if (MyPlayer.CountInv("HA_Soul") >= Cost)
			{
				// Make sure we haven't reached maximum slots yet
				let AllySlot = MyPlayer.FindInventory("HA_AllySlot");
				if (AllySlot)
				{
					if (MyPlayer.CountInv("HA_AllySlot") == AllySlot.MaxAmount)
					{
						string msg = String.Format("\c[silver]Maximum slots have already been reached", MyPlayer.CountInv("HA_AllySlot"));
						if (MyPlayer.checkLocalView())
						{
							Console.MidPrint(NULL, msg);
						}
						MyPlayer.A_StartSound("DoorLocked", CHAN_BODY);
						return;
					}
				}

				MyPlayer.A_GiveInventory("HA_AllySlot", 1);
				MyPlayer.A_TakeInventory("HA_Soul", Cost);
				MyPlayer.A_StartSound("MysticIncant", CHAN_BODY);
				string msg = String.Format("\c[silver]You now have %d Ally Slots!", MyPlayer.CountInv("HA_AllySlot"));
				Console.Printf("\c[white]%s\c* is now able to have %d Allies total!", MyPlayer.player.GetUserName(), MyPlayer.CountInv("HA_AllySlot"));
				if (MyPlayer.checkLocalView())
				{
					Console.MidPrint(NULL, msg);
				}
			}
		}
	}

	Default
	{
		+COUNTITEM
		+FLOATBOB
		+INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE;
       	+INVENTORY.UNTOSSABLE;
       	+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		Inventory.PickupFlash "PickupFlash";
		+INVENTORY.FANCYPICKUPSOUND
		Inventory.Icon "HAINCRE";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "Picked up an Ally Slot Incrementor. Who's going to jail for this?";
		Inventory.Amount 1;
		Inventory.MaxAmount 9;
		Tag "Ally Slots";
	}
	States
	{
	Spawn:
		EGGC ABCB 6;
		Loop;
	Use:
		TNT1 A 0 { invoker.TryIncrementing(); }
		Fail;
	}
}

class HA_Soul : Ammo
{
	void SoulToAmount(bool FirstPickup = false)
	{
		int Souls = owner.CountInv("HA_Soul");
		if (!FirstPickup) Souls += 1;
		
		owner.A_SetInventory("HA_AllySpawner", Souls);
	}

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == "HA_Soul")
		{
			if (owner)
			{
				SoultoAmount();
			}
		}
		return Super.HandlePickup (item);
	}

	override void AttachToOwner (actor other)
	{
		Super.AttachToOwner(other);
		if (owner)
		{
			SoulToAmount(true);
		}
	}

	Default
	{
		Inventory.PickupMessage "Picked up a soul.";
		Inventory.Amount 1;
		Inventory.MaxAmount 999;
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 999;
		Inventory.Icon "EMOMA0";
		Tag "Renewable Soul";
		Scale 1.65;
		RenderStyle "Translucent";
		Alpha 0.65;
		+FLOATBOB
		+NOGRAVITY
	}
	States
	{
	Spawn:
		XQXQ A -1;
		Stop;
	}
}